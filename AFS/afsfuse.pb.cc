// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afsfuse.proto

#include "afsfuse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace afsfuse {
constexpr SerializeByte::SerializeByte(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SerializeByteDefaultTypeInternal {
  constexpr SerializeByteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializeByteDefaultTypeInternal() {}
  union {
    SerializeByte _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializeByteDefaultTypeInternal _SerializeByte_default_instance_;
constexpr String::String(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringDefaultTypeInternal {
  constexpr StringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringDefaultTypeInternal() {}
  union {
    String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringDefaultTypeInternal _String_default_instance_;
constexpr Dirent::Dirent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dino_(0u)
  , dtype_(0u)
  , err_(0){}
struct DirentDefaultTypeInternal {
  constexpr DirentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirentDefaultTypeInternal() {}
  union {
    Dirent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirentDefaultTypeInternal _Dirent_default_instance_;
constexpr Stat::Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dev_(0u)
  , ino_(0u)
  , mode_(0)
  , nlink_(0u)
  , uid_(0u)
  , gid_(0u)
  , size_(int64_t{0})
  , blksize_(int64_t{0})
  , blocks_(int64_t{0})
  , atime_(0)
  , mtime_(0)
  , ctime_(0)
  , err_(0){}
struct StatDefaultTypeInternal {
  constexpr StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatDefaultTypeInternal() {}
  union {
    Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatDefaultTypeInternal _Stat_default_instance_;
constexpr FuseFileInfo::FuseFileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(0)
  , fh_(0)
  , oldfh_(0u)
  , err_(0)
  , lockowner_(uint64_t{0u})
  , pollevent_(0u){}
struct FuseFileInfoDefaultTypeInternal {
  constexpr FuseFileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FuseFileInfoDefaultTypeInternal() {}
  union {
    FuseFileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FuseFileInfoDefaultTypeInternal _FuseFileInfo_default_instance_;
constexpr ReadResult::ReadResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytesread_(0)
  , err_(0){}
struct ReadResultDefaultTypeInternal {
  constexpr ReadResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadResultDefaultTypeInternal() {}
  union {
    ReadResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadResultDefaultTypeInternal _ReadResult_default_instance_;
constexpr ReadRequest::ReadRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(int64_t{0})
  , size_(0u){}
struct ReadRequestDefaultTypeInternal {
  constexpr ReadRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRequestDefaultTypeInternal() {}
  union {
    ReadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
constexpr WriteRequest::WriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(0u)
  , offset_(0){}
struct WriteRequestDefaultTypeInternal {
  constexpr WriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteRequestDefaultTypeInternal() {}
  union {
    WriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
constexpr WriteResult::WriteResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nbytes_(0)
  , err_(0){}
struct WriteResultDefaultTypeInternal {
  constexpr WriteResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteResultDefaultTypeInternal() {}
  union {
    WriteResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteResultDefaultTypeInternal _WriteResult_default_instance_;
constexpr CreateRequest::CreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0)
  , flags_(0){}
struct CreateRequestDefaultTypeInternal {
  constexpr CreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
constexpr CreateResult::CreateResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(0)
  , fh_(0)
  , oldfh_(0u)
  , pollevent_(0u)
  , lockowner_(uint64_t{0u})
  , err_(0){}
struct CreateResultDefaultTypeInternal {
  constexpr CreateResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateResultDefaultTypeInternal() {}
  union {
    CreateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateResultDefaultTypeInternal _CreateResult_default_instance_;
constexpr MkdirRequest::MkdirRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0){}
struct MkdirRequestDefaultTypeInternal {
  constexpr MkdirRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MkdirRequestDefaultTypeInternal() {}
  union {
    MkdirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MkdirRequestDefaultTypeInternal _MkdirRequest_default_instance_;
constexpr OutputInfo::OutputInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_(0){}
struct OutputInfoDefaultTypeInternal {
  constexpr OutputInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputInfoDefaultTypeInternal() {}
  union {
    OutputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputInfoDefaultTypeInternal _OutputInfo_default_instance_;
constexpr RenameRequest::RenameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flag_(0u){}
struct RenameRequestDefaultTypeInternal {
  constexpr RenameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenameRequestDefaultTypeInternal() {}
  union {
    RenameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
constexpr UtimensRequest::UtimensRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nsec_(int64_t{0})
  , sec_(0)
  , sec2_(0)
  , nsec2_(int64_t{0}){}
struct UtimensRequestDefaultTypeInternal {
  constexpr UtimensRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtimensRequestDefaultTypeInternal() {}
  union {
    UtimensRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtimensRequestDefaultTypeInternal _UtimensRequest_default_instance_;
constexpr MknodRequest::MknodRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0)
  , rdev_(0u){}
struct MknodRequestDefaultTypeInternal {
  constexpr MknodRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MknodRequestDefaultTypeInternal() {}
  union {
    MknodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MknodRequestDefaultTypeInternal _MknodRequest_default_instance_;
constexpr FileContent::FileContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct FileContentDefaultTypeInternal {
  constexpr FileContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileContentDefaultTypeInternal() {}
  union {
    FileContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileContentDefaultTypeInternal _FileContent_default_instance_;
constexpr File::File(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FileDefaultTypeInternal {
  constexpr FileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileDefaultTypeInternal _File_default_instance_;
}  // namespace afsfuse
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_afsfuse_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_afsfuse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_afsfuse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_afsfuse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::SerializeByte, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::SerializeByte, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::String, str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::Dirent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::Dirent, dino_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Dirent, dname_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Dirent, dtype_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Dirent, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, dev_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, ino_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, mode_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, nlink_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, uid_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, gid_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, size_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, blksize_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, blocks_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, atime_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, mtime_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, ctime_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::Stat, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, flags_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, fh_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, oldfh_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, lockowner_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, pollevent_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, err_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FuseFileInfo, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadResult, bytesread_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadResult, buffer_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadResult, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadRequest, path_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadRequest, size_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::ReadRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteRequest, path_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteRequest, size_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteRequest, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteResult, nbytes_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::WriteResult, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateRequest, path_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateRequest, mode_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateRequest, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateResult, flags_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateResult, fh_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateResult, oldfh_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateResult, lockowner_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateResult, pollevent_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::CreateResult, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::MkdirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::MkdirRequest, s_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::MkdirRequest, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::OutputInfo, str_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::OutputInfo, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::RenameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::RenameRequest, fp_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::RenameRequest, tp_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::RenameRequest, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::UtimensRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::UtimensRequest, path_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::UtimensRequest, sec_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::UtimensRequest, nsec_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::UtimensRequest, sec2_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::UtimensRequest, nsec2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::MknodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::MknodRequest, path_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::MknodRequest, mode_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::MknodRequest, rdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::FileContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::FileContent, id_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FileContent, name_),
  PROTOBUF_FIELD_OFFSET(::afsfuse::FileContent, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afsfuse::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afsfuse::File, path_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::afsfuse::SerializeByte)},
  { 7, -1, -1, sizeof(::afsfuse::String)},
  { 14, -1, -1, sizeof(::afsfuse::Dirent)},
  { 24, -1, -1, sizeof(::afsfuse::Stat)},
  { 43, -1, -1, sizeof(::afsfuse::FuseFileInfo)},
  { 56, -1, -1, sizeof(::afsfuse::ReadResult)},
  { 65, -1, -1, sizeof(::afsfuse::ReadRequest)},
  { 74, -1, -1, sizeof(::afsfuse::WriteRequest)},
  { 84, -1, -1, sizeof(::afsfuse::WriteResult)},
  { 92, -1, -1, sizeof(::afsfuse::CreateRequest)},
  { 101, -1, -1, sizeof(::afsfuse::CreateResult)},
  { 113, -1, -1, sizeof(::afsfuse::MkdirRequest)},
  { 121, -1, -1, sizeof(::afsfuse::OutputInfo)},
  { 129, -1, -1, sizeof(::afsfuse::RenameRequest)},
  { 138, -1, -1, sizeof(::afsfuse::UtimensRequest)},
  { 149, -1, -1, sizeof(::afsfuse::MknodRequest)},
  { 158, -1, -1, sizeof(::afsfuse::FileContent)},
  { 167, -1, -1, sizeof(::afsfuse::File)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_SerializeByte_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_Dirent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_FuseFileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_ReadResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_ReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_WriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_WriteResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_CreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_CreateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_MkdirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_RenameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_UtimensRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_MknodRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_FileContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afsfuse::_File_default_instance_),
};

const char descriptor_table_protodef_afsfuse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rafsfuse.proto\022\007afsfuse\"\037\n\rSerializeByt"
  "e\022\016\n\006buffer\030\001 \001(\014\"\025\n\006String\022\013\n\003str\030\001 \001(\t"
  "\"A\n\006Dirent\022\014\n\004dino\030\001 \001(\r\022\r\n\005dname\030\002 \001(\t\022"
  "\r\n\005dtype\030\003 \001(\r\022\013\n\003err\030\004 \001(\005\"\300\001\n\004Stat\022\013\n\003"
  "dev\030\001 \001(\r\022\013\n\003ino\030\002 \001(\r\022\014\n\004mode\030\003 \001(\005\022\r\n\005"
  "nlink\030\004 \001(\r\022\013\n\003uid\030\005 \001(\r\022\013\n\003gid\030\006 \001(\r\022\014\n"
  "\004size\030\007 \001(\022\022\017\n\007blksize\030\010 \001(\022\022\016\n\006blocks\030\t"
  " \001(\022\022\r\n\005atime\030\n \001(\005\022\r\n\005mtime\030\013 \001(\005\022\r\n\005ct"
  "ime\030\014 \001(\005\022\013\n\003err\030\r \001(\005\"y\n\014FuseFileInfo\022\r"
  "\n\005flags\030\001 \001(\005\022\n\n\002fh\030\002 \001(\005\022\r\n\005oldfh\030\003 \001(\r"
  "\022\021\n\tlockowner\030\005 \001(\004\022\021\n\tpollevent\030\006 \001(\r\022\013"
  "\n\003err\030\004 \001(\005\022\014\n\004path\030\007 \001(\t\"<\n\nReadResult\022"
  "\021\n\tbytesread\030\001 \001(\005\022\016\n\006buffer\030\002 \001(\014\022\013\n\003er"
  "r\030\003 \001(\005\"9\n\013ReadRequest\022\014\n\004path\030\001 \001(\t\022\014\n\004"
  "size\030\002 \001(\r\022\016\n\006offset\030\003 \001(\003\"J\n\014WriteReque"
  "st\022\014\n\004path\030\001 \001(\t\022\014\n\004size\030\002 \001(\r\022\016\n\006offset"
  "\030\003 \001(\005\022\016\n\006buffer\030\004 \001(\014\"*\n\013WriteResult\022\016\n"
  "\006nbytes\030\001 \001(\005\022\013\n\003err\030\002 \001(\005\":\n\rCreateRequ"
  "est\022\014\n\004path\030\001 \001(\t\022\014\n\004mode\030\002 \001(\005\022\r\n\005flags"
  "\030\003 \001(\005\"k\n\014CreateResult\022\r\n\005flags\030\001 \001(\005\022\n\n"
  "\002fh\030\002 \001(\005\022\r\n\005oldfh\030\003 \001(\r\022\021\n\tlockowner\030\005 "
  "\001(\004\022\021\n\tpollevent\030\006 \001(\r\022\013\n\003err\030\007 \001(\005\"\'\n\014M"
  "kdirRequest\022\t\n\001s\030\001 \001(\t\022\014\n\004mode\030\002 \001(\005\"&\n\n"
  "OutputInfo\022\013\n\003str\030\001 \001(\t\022\013\n\003err\030\002 \001(\005\"5\n\r"
  "RenameRequest\022\n\n\002fp\030\001 \001(\t\022\n\n\002tp\030\002 \001(\t\022\014\n"
  "\004flag\030\003 \001(\r\"V\n\016UtimensRequest\022\014\n\004path\030\001 "
  "\001(\t\022\013\n\003sec\030\002 \001(\005\022\014\n\004nsec\030\003 \001(\003\022\014\n\004sec2\030\004"
  " \001(\005\022\r\n\005nsec2\030\005 \001(\003\"8\n\014MknodRequest\022\014\n\004p"
  "ath\030\001 \001(\t\022\014\n\004mode\030\002 \001(\005\022\014\n\004rdev\030\003 \001(\r\"8\n"
  "\013FileContent\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\017"
  "\n\007content\030\003 \001(\014\"\024\n\004File\022\014\n\004path\030\001 \001(\t2\346\006"
  "\n\003AFS\0223\n\017afsfuse_getattr\022\017.afsfuse.Strin"
  "g\032\r.afsfuse.Stat\"\000\0227\n\017afsfuse_readdir\022\017."
  "afsfuse.String\032\017.afsfuse.Dirent\"\0000\001\022>\n\014a"
  "fsfuse_open\022\025.afsfuse.FuseFileInfo\032\025.afs"
  "fuse.FuseFileInfo\"\000\022;\n\014afsfuse_read\022\024.af"
  "sfuse.ReadRequest\032\023.afsfuse.ReadResult\"\000"
  "\022>\n\rafsfuse_write\022\025.afsfuse.WriteRequest"
  "\032\024.afsfuse.WriteResult\"\000\022A\n\016afsfuse_crea"
  "te\022\026.afsfuse.CreateRequest\032\025.afsfuse.Cre"
  "ateResult\"\000\022=\n\rafsfuse_mkdir\022\025.afsfuse.M"
  "kdirRequest\032\023.afsfuse.OutputInfo\"\000\0227\n\raf"
  "sfuse_rmdir\022\017.afsfuse.String\032\023.afsfuse.O"
  "utputInfo\"\000\0228\n\016afsfuse_unlink\022\017.afsfuse."
  "String\032\023.afsfuse.OutputInfo\"\000\022\?\n\016afsfuse"
  "_rename\022\026.afsfuse.RenameRequest\032\023.afsfus"
  "e.OutputInfo\"\000\022A\n\017afsfuse_utimens\022\027.afsf"
  "use.UtimensRequest\032\023.afsfuse.OutputInfo\""
  "\000\022=\n\rafsfuse_mknod\022\025.afsfuse.MknodReques"
  "t\032\023.afsfuse.OutputInfo\"\000\022@\n\017afsfuse_putF"
  "ile\022\024.afsfuse.FileContent\032\023.afsfuse.Outp"
  "utInfo\"\000(\001\022:\n\017afsfuse_getFile\022\r.afsfuse."
  "File\032\024.afsfuse.FileContent\"\0000\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_afsfuse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_afsfuse_2eproto = {
  false, false, 2118, descriptor_table_protodef_afsfuse_2eproto, "afsfuse.proto", 
  &descriptor_table_afsfuse_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_afsfuse_2eproto::offsets,
  file_level_metadata_afsfuse_2eproto, file_level_enum_descriptors_afsfuse_2eproto, file_level_service_descriptors_afsfuse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_afsfuse_2eproto_getter() {
  return &descriptor_table_afsfuse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_afsfuse_2eproto(&descriptor_table_afsfuse_2eproto);
namespace afsfuse {

// ===================================================================

class SerializeByte::_Internal {
 public:
};

SerializeByte::SerializeByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.SerializeByte)
}
SerializeByte::SerializeByte(const SerializeByte& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afsfuse.SerializeByte)
}

void SerializeByte::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SerializeByte::~SerializeByte() {
  // @@protoc_insertion_point(destructor:afsfuse.SerializeByte)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializeByte::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SerializeByte::ArenaDtor(void* object) {
  SerializeByte* _this = reinterpret_cast< SerializeByte* >(object);
  (void)_this;
}
void SerializeByte::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializeByte::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializeByte::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.SerializeByte)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializeByte::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializeByte::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.SerializeByte)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.SerializeByte)
  return target;
}

size_t SerializeByte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.SerializeByte)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializeByte::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializeByte::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializeByte::GetClassData() const { return &_class_data_; }

void SerializeByte::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SerializeByte *>(to)->MergeFrom(
      static_cast<const SerializeByte &>(from));
}


void SerializeByte::MergeFrom(const SerializeByte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.SerializeByte)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializeByte::CopyFrom(const SerializeByte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.SerializeByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializeByte::IsInitialized() const {
  return true;
}

void SerializeByte::InternalSwap(SerializeByte* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializeByte::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[0]);
}

// ===================================================================

class String::_Internal {
 public:
};

String::String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.String)
}
String::String(const String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afsfuse.String)
}

void String::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

String::~String() {
  // @@protoc_insertion_point(destructor:afsfuse.String)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void String::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void String::ArenaDtor(void* object) {
  String* _this = reinterpret_cast< String* >(object);
  (void)_this;
}
void String::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void String::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.String.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.String.str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.String)
  return target;
}

size_t String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData String::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    String::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*String::GetClassData() const { return &_class_data_; }

void String::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<String *>(to)->MergeFrom(
      static_cast<const String &>(from));
}


void String::MergeFrom(const String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.String)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void String::CopyFrom(const String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {
  return true;
}

void String::InternalSwap(String* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata String::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[1]);
}

// ===================================================================

class Dirent::_Internal {
 public:
};

Dirent::Dirent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.Dirent)
}
Dirent::Dirent(const Dirent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dname().empty()) {
    dname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&dino_, &from.dino_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&dino_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.Dirent)
}

void Dirent::SharedCtor() {
dname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dino_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&dino_)) + sizeof(err_));
}

Dirent::~Dirent() {
  // @@protoc_insertion_point(destructor:afsfuse.Dirent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dirent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Dirent::ArenaDtor(void* object) {
  Dirent* _this = reinterpret_cast< Dirent* >(object);
  (void)_this;
}
void Dirent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dirent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dirent::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.Dirent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dname_.ClearToEmpty();
  ::memset(&dino_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&dino_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dirent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dino = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.Dirent.dname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dirent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.Dirent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dino = 1;
  if (this->_internal_dino() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dino(), target);
  }

  // string dname = 2;
  if (!this->_internal_dname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dname().data(), static_cast<int>(this->_internal_dname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.Dirent.dname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dname(), target);
  }

  // uint32 dtype = 3;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dtype(), target);
  }

  // int32 err = 4;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.Dirent)
  return target;
}

size_t Dirent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.Dirent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dname = 2;
  if (!this->_internal_dname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dname());
  }

  // uint32 dino = 1;
  if (this->_internal_dino() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dino());
  }

  // uint32 dtype = 3;
  if (this->_internal_dtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dtype());
  }

  // int32 err = 4;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dirent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dirent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dirent::GetClassData() const { return &_class_data_; }

void Dirent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dirent *>(to)->MergeFrom(
      static_cast<const Dirent &>(from));
}


void Dirent::MergeFrom(const Dirent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.Dirent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dname().empty()) {
    _internal_set_dname(from._internal_dname());
  }
  if (from._internal_dino() != 0) {
    _internal_set_dino(from._internal_dino());
  }
  if (from._internal_dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dirent::CopyFrom(const Dirent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.Dirent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dirent::IsInitialized() const {
  return true;
}

void Dirent::InternalSwap(Dirent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dname_, lhs_arena,
      &other->dname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dirent, err_)
      + sizeof(Dirent::err_)
      - PROTOBUF_FIELD_OFFSET(Dirent, dino_)>(
          reinterpret_cast<char*>(&dino_),
          reinterpret_cast<char*>(&other->dino_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dirent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[2]);
}

// ===================================================================

class Stat::_Internal {
 public:
};

Stat::Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.Stat)
}
Stat::Stat(const Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dev_, &from.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&dev_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.Stat)
}

void Stat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dev_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&dev_)) + sizeof(err_));
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:afsfuse.Stat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Stat::ArenaDtor(void* object) {
  Stat* _this = reinterpret_cast< Stat* >(object);
  (void)_this;
}
void Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&dev_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nlink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nlink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 blksize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          blksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 blocks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 atime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          atime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mtime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ctime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dev = 1;
  if (this->_internal_dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dev(), target);
  }

  // uint32 ino = 2;
  if (this->_internal_ino() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ino(), target);
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  // uint32 nlink = 4;
  if (this->_internal_nlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nlink(), target);
  }

  // uint32 uid = 5;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uid(), target);
  }

  // uint32 gid = 6;
  if (this->_internal_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gid(), target);
  }

  // sint64 size = 7;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(7, this->_internal_size(), target);
  }

  // sint64 blksize = 8;
  if (this->_internal_blksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_blksize(), target);
  }

  // sint64 blocks = 9;
  if (this->_internal_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(9, this->_internal_blocks(), target);
  }

  // int32 atime = 10;
  if (this->_internal_atime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_atime(), target);
  }

  // int32 mtime = 11;
  if (this->_internal_mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_mtime(), target);
  }

  // int32 ctime = 12;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ctime(), target);
  }

  // int32 err = 13;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.Stat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dev = 1;
  if (this->_internal_dev() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dev());
  }

  // uint32 ino = 2;
  if (this->_internal_ino() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ino());
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // uint32 nlink = 4;
  if (this->_internal_nlink() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_nlink());
  }

  // uint32 uid = 5;
  if (this->_internal_uid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uid());
  }

  // uint32 gid = 6;
  if (this->_internal_gid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gid());
  }

  // sint64 size = 7;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  // sint64 blksize = 8;
  if (this->_internal_blksize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_blksize());
  }

  // sint64 blocks = 9;
  if (this->_internal_blocks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_blocks());
  }

  // int32 atime = 10;
  if (this->_internal_atime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_atime());
  }

  // int32 mtime = 11;
  if (this->_internal_mtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mtime());
  }

  // int32 ctime = 12;
  if (this->_internal_ctime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ctime());
  }

  // int32 err = 13;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stat::GetClassData() const { return &_class_data_; }

void Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stat *>(to)->MergeFrom(
      static_cast<const Stat &>(from));
}


void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dev() != 0) {
    _internal_set_dev(from._internal_dev());
  }
  if (from._internal_ino() != 0) {
    _internal_set_ino(from._internal_ino());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_nlink() != 0) {
    _internal_set_nlink(from._internal_nlink());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_blksize() != 0) {
    _internal_set_blksize(from._internal_blksize());
  }
  if (from._internal_blocks() != 0) {
    _internal_set_blocks(from._internal_blocks());
  }
  if (from._internal_atime() != 0) {
    _internal_set_atime(from._internal_atime());
  }
  if (from._internal_mtime() != 0) {
    _internal_set_mtime(from._internal_mtime());
  }
  if (from._internal_ctime() != 0) {
    _internal_set_ctime(from._internal_ctime());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::InternalSwap(Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stat, err_)
      + sizeof(Stat::err_)
      - PROTOBUF_FIELD_OFFSET(Stat, dev_)>(
          reinterpret_cast<char*>(&dev_),
          reinterpret_cast<char*>(&other->dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[3]);
}

// ===================================================================

class FuseFileInfo::_Internal {
 public:
};

FuseFileInfo::FuseFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.FuseFileInfo)
}
FuseFileInfo::FuseFileInfo(const FuseFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&pollevent_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(pollevent_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.FuseFileInfo)
}

void FuseFileInfo::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pollevent_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(pollevent_));
}

FuseFileInfo::~FuseFileInfo() {
  // @@protoc_insertion_point(destructor:afsfuse.FuseFileInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FuseFileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FuseFileInfo::ArenaDtor(void* object) {
  FuseFileInfo* _this = reinterpret_cast< FuseFileInfo* >(object);
  (void)_this;
}
void FuseFileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FuseFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FuseFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.FuseFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pollevent_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(pollevent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuseFileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oldfh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oldfh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lockowner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lockowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pollevent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pollevent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.FuseFileInfo.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuseFileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.FuseFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flags = 1;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flags(), target);
  }

  // int32 fh = 2;
  if (this->_internal_fh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fh(), target);
  }

  // uint32 oldfh = 3;
  if (this->_internal_oldfh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oldfh(), target);
  }

  // int32 err = 4;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_err(), target);
  }

  // uint64 lockowner = 5;
  if (this->_internal_lockowner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lockowner(), target);
  }

  // uint32 pollevent = 6;
  if (this->_internal_pollevent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pollevent(), target);
  }

  // string path = 7;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.FuseFileInfo.path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.FuseFileInfo)
  return target;
}

size_t FuseFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.FuseFileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 7;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 flags = 1;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  // int32 fh = 2;
  if (this->_internal_fh() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fh());
  }

  // uint32 oldfh = 3;
  if (this->_internal_oldfh() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_oldfh());
  }

  // int32 err = 4;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  // uint64 lockowner = 5;
  if (this->_internal_lockowner() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_lockowner());
  }

  // uint32 pollevent = 6;
  if (this->_internal_pollevent() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pollevent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuseFileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FuseFileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuseFileInfo::GetClassData() const { return &_class_data_; }

void FuseFileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FuseFileInfo *>(to)->MergeFrom(
      static_cast<const FuseFileInfo &>(from));
}


void FuseFileInfo::MergeFrom(const FuseFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.FuseFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_fh() != 0) {
    _internal_set_fh(from._internal_fh());
  }
  if (from._internal_oldfh() != 0) {
    _internal_set_oldfh(from._internal_oldfh());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  if (from._internal_lockowner() != 0) {
    _internal_set_lockowner(from._internal_lockowner());
  }
  if (from._internal_pollevent() != 0) {
    _internal_set_pollevent(from._internal_pollevent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuseFileInfo::CopyFrom(const FuseFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.FuseFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuseFileInfo::IsInitialized() const {
  return true;
}

void FuseFileInfo::InternalSwap(FuseFileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuseFileInfo, pollevent_)
      + sizeof(FuseFileInfo::pollevent_)
      - PROTOBUF_FIELD_OFFSET(FuseFileInfo, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuseFileInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[4]);
}

// ===================================================================

class ReadResult::_Internal {
 public:
};

ReadResult::ReadResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.ReadResult)
}
ReadResult::ReadResult(const ReadResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bytesread_, &from.bytesread_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&bytesread_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.ReadResult)
}

void ReadResult::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bytesread_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&bytesread_)) + sizeof(err_));
}

ReadResult::~ReadResult() {
  // @@protoc_insertion_point(destructor:afsfuse.ReadResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadResult::ArenaDtor(void* object) {
  ReadResult* _this = reinterpret_cast< ReadResult* >(object);
  (void)_this;
}
void ReadResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadResult::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.ReadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  ::memset(&bytesread_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&bytesread_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bytesread = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bytesread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buffer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.ReadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bytesread = 1;
  if (this->_internal_bytesread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bytesread(), target);
  }

  // bytes buffer = 2;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_buffer(), target);
  }

  // int32 err = 3;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.ReadResult)
  return target;
}

size_t ReadResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.ReadResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 2;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // int32 bytesread = 1;
  if (this->_internal_bytesread() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bytesread());
  }

  // int32 err = 3;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadResult::GetClassData() const { return &_class_data_; }

void ReadResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadResult *>(to)->MergeFrom(
      static_cast<const ReadResult &>(from));
}


void ReadResult::MergeFrom(const ReadResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.ReadResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_bytesread() != 0) {
    _internal_set_bytesread(from._internal_bytesread());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadResult::CopyFrom(const ReadResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.ReadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResult::IsInitialized() const {
  return true;
}

void ReadResult::InternalSwap(ReadResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadResult, err_)
      + sizeof(ReadResult::err_)
      - PROTOBUF_FIELD_OFFSET(ReadResult, bytesread_)>(
          reinterpret_cast<char*>(&bytesread_),
          reinterpret_cast<char*>(&other->bytesread_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[5]);
}

// ===================================================================

class ReadRequest::_Internal {
 public:
};

ReadRequest::ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.ReadRequest)
}
ReadRequest::ReadRequest(const ReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.ReadRequest)
}

void ReadRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(size_));
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:afsfuse.ReadRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadRequest::ArenaDtor(void* object) {
  ReadRequest* _this = reinterpret_cast< ReadRequest* >(object);
  (void)_this;
}
void ReadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.ReadRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.ReadRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.ReadRequest)
  return target;
}

size_t ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.ReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRequest::GetClassData() const { return &_class_data_; }

void ReadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRequest *>(to)->MergeFrom(
      static_cast<const ReadRequest &>(from));
}


void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::InternalSwap(ReadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRequest, size_)
      + sizeof(ReadRequest::size_)
      - PROTOBUF_FIELD_OFFSET(ReadRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[6]);
}

// ===================================================================

class WriteRequest::_Internal {
 public:
};

WriteRequest::WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&size_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.WriteRequest)
}

void WriteRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&size_)) + sizeof(offset_));
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:afsfuse.WriteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteRequest::ArenaDtor(void* object) {
  WriteRequest* _this = reinterpret_cast< WriteRequest* >(object);
  (void)_this;
}
void WriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.WriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  buffer_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&size_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.WriteRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.WriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.WriteRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // int32 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_offset(), target);
  }

  // bytes buffer = 4;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.WriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bytes buffer = 4;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // int32 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteRequest::GetClassData() const { return &_class_data_; }

void WriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteRequest *>(to)->MergeFrom(
      static_cast<const WriteRequest &>(from));
}


void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteRequest, offset_)
      + sizeof(WriteRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(WriteRequest, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[7]);
}

// ===================================================================

class WriteResult::_Internal {
 public:
};

WriteResult::WriteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.WriteResult)
}
WriteResult::WriteResult(const WriteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nbytes_, &from.nbytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&nbytes_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.WriteResult)
}

void WriteResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nbytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&nbytes_)) + sizeof(err_));
}

WriteResult::~WriteResult() {
  // @@protoc_insertion_point(destructor:afsfuse.WriteResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriteResult::ArenaDtor(void* object) {
  WriteResult* _this = reinterpret_cast< WriteResult* >(object);
  (void)_this;
}
void WriteResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.WriteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nbytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&nbytes_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nbytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.WriteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nbytes = 1;
  if (this->_internal_nbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nbytes(), target);
  }

  // int32 err = 2;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.WriteResult)
  return target;
}

size_t WriteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.WriteResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nbytes = 1;
  if (this->_internal_nbytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nbytes());
  }

  // int32 err = 2;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteResult::GetClassData() const { return &_class_data_; }

void WriteResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteResult *>(to)->MergeFrom(
      static_cast<const WriteResult &>(from));
}


void WriteResult::MergeFrom(const WriteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.WriteResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nbytes() != 0) {
    _internal_set_nbytes(from._internal_nbytes());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteResult::CopyFrom(const WriteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.WriteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResult::IsInitialized() const {
  return true;
}

void WriteResult::InternalSwap(WriteResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteResult, err_)
      + sizeof(WriteResult::err_)
      - PROTOBUF_FIELD_OFFSET(WriteResult, nbytes_)>(
          reinterpret_cast<char*>(&nbytes_),
          reinterpret_cast<char*>(&other->nbytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[8]);
}

// ===================================================================

class CreateRequest::_Internal {
 public:
};

CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.CreateRequest)
}

void CreateRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(flags_));
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:afsfuse.CreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRequest::ArenaDtor(void* object) {
  CreateRequest* _this = reinterpret_cast< CreateRequest* >(object);
  (void)_this;
}
void CreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.CreateRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.CreateRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.CreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }

void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRequest *>(to)->MergeFrom(
      static_cast<const CreateRequest &>(from));
}


void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRequest, flags_)
      + sizeof(CreateRequest::flags_)
      - PROTOBUF_FIELD_OFFSET(CreateRequest, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[9]);
}

// ===================================================================

class CreateResult::_Internal {
 public:
};

CreateResult::CreateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.CreateResult)
}
CreateResult::CreateResult(const CreateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.CreateResult)
}

void CreateResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(err_));
}

CreateResult::~CreateResult() {
  // @@protoc_insertion_point(destructor:afsfuse.CreateResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateResult::ArenaDtor(void* object) {
  CreateResult* _this = reinterpret_cast< CreateResult* >(object);
  (void)_this;
}
void CreateResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.CreateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oldfh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oldfh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lockowner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lockowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pollevent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pollevent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.CreateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flags = 1;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flags(), target);
  }

  // int32 fh = 2;
  if (this->_internal_fh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fh(), target);
  }

  // uint32 oldfh = 3;
  if (this->_internal_oldfh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oldfh(), target);
  }

  // uint64 lockowner = 5;
  if (this->_internal_lockowner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lockowner(), target);
  }

  // uint32 pollevent = 6;
  if (this->_internal_pollevent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pollevent(), target);
  }

  // int32 err = 7;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.CreateResult)
  return target;
}

size_t CreateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.CreateResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 flags = 1;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  // int32 fh = 2;
  if (this->_internal_fh() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fh());
  }

  // uint32 oldfh = 3;
  if (this->_internal_oldfh() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_oldfh());
  }

  // uint32 pollevent = 6;
  if (this->_internal_pollevent() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pollevent());
  }

  // uint64 lockowner = 5;
  if (this->_internal_lockowner() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_lockowner());
  }

  // int32 err = 7;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateResult::GetClassData() const { return &_class_data_; }

void CreateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateResult *>(to)->MergeFrom(
      static_cast<const CreateResult &>(from));
}


void CreateResult::MergeFrom(const CreateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.CreateResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_fh() != 0) {
    _internal_set_fh(from._internal_fh());
  }
  if (from._internal_oldfh() != 0) {
    _internal_set_oldfh(from._internal_oldfh());
  }
  if (from._internal_pollevent() != 0) {
    _internal_set_pollevent(from._internal_pollevent());
  }
  if (from._internal_lockowner() != 0) {
    _internal_set_lockowner(from._internal_lockowner());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateResult::CopyFrom(const CreateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.CreateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResult::IsInitialized() const {
  return true;
}

void CreateResult::InternalSwap(CreateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateResult, err_)
      + sizeof(CreateResult::err_)
      - PROTOBUF_FIELD_OFFSET(CreateResult, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[10]);
}

// ===================================================================

class MkdirRequest::_Internal {
 public:
};

MkdirRequest::MkdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.MkdirRequest)
}
MkdirRequest::MkdirRequest(const MkdirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArenaForAllocation());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:afsfuse.MkdirRequest)
}

void MkdirRequest::SharedCtor() {
s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mode_ = 0;
}

MkdirRequest::~MkdirRequest() {
  // @@protoc_insertion_point(destructor:afsfuse.MkdirRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MkdirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MkdirRequest::ArenaDtor(void* object) {
  MkdirRequest* _this = reinterpret_cast< MkdirRequest* >(object);
  (void)_this;
}
void MkdirRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MkdirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MkdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.MkdirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.ClearToEmpty();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MkdirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.MkdirRequest.s"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MkdirRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.MkdirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.MkdirRequest.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.MkdirRequest)
  return target;
}

size_t MkdirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.MkdirRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MkdirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirRequest::GetClassData() const { return &_class_data_; }

void MkdirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MkdirRequest *>(to)->MergeFrom(
      static_cast<const MkdirRequest &>(from));
}


void MkdirRequest::MergeFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.MkdirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MkdirRequest::CopyFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.MkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirRequest::IsInitialized() const {
  return true;
}

void MkdirRequest::InternalSwap(MkdirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_, lhs_arena,
      &other->s_, rhs_arena
  );
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[11]);
}

// ===================================================================

class OutputInfo::_Internal {
 public:
};

OutputInfo::OutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.OutputInfo)
}
OutputInfo::OutputInfo(const OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:afsfuse.OutputInfo)
}

void OutputInfo::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
err_ = 0;
}

OutputInfo::~OutputInfo() {
  // @@protoc_insertion_point(destructor:afsfuse.OutputInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputInfo::ArenaDtor(void* object) {
  OutputInfo* _this = reinterpret_cast< OutputInfo* >(object);
  (void)_this;
}
void OutputInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty();
  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.OutputInfo.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.OutputInfo.str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str(), target);
  }

  // int32 err = 2;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.OutputInfo)
  return target;
}

size_t OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.OutputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // int32 err = 2;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputInfo::GetClassData() const { return &_class_data_; }

void OutputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutputInfo *>(to)->MergeFrom(
      static_cast<const OutputInfo &>(from));
}


void OutputInfo::MergeFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputInfo::CopyFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputInfo::IsInitialized() const {
  return true;
}

void OutputInfo::InternalSwap(OutputInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[12]);
}

// ===================================================================

class RenameRequest::_Internal {
 public:
};

RenameRequest::RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fp().empty()) {
    fp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fp(), 
      GetArenaForAllocation());
  }
  tp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tp().empty()) {
    tp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tp(), 
      GetArenaForAllocation());
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:afsfuse.RenameRequest)
}

void RenameRequest::SharedCtor() {
fp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
flag_ = 0u;
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:afsfuse.RenameRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenameRequest::ArenaDtor(void* object) {
  RenameRequest* _this = reinterpret_cast< RenameRequest* >(object);
  (void)_this;
}
void RenameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.RenameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fp_.ClearToEmpty();
  tp_.ClearToEmpty();
  flag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.RenameRequest.fp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.RenameRequest.tp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.RenameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fp = 1;
  if (!this->_internal_fp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fp().data(), static_cast<int>(this->_internal_fp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.RenameRequest.fp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fp(), target);
  }

  // string tp = 2;
  if (!this->_internal_tp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tp().data(), static_cast<int>(this->_internal_tp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.RenameRequest.tp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tp(), target);
  }

  // uint32 flag = 3;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.RenameRequest)
  return target;
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.RenameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fp = 1;
  if (!this->_internal_fp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fp());
  }

  // string tp = 2;
  if (!this->_internal_tp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tp());
  }

  // uint32 flag = 3;
  if (this->_internal_flag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameRequest::GetClassData() const { return &_class_data_; }

void RenameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RenameRequest *>(to)->MergeFrom(
      static_cast<const RenameRequest &>(from));
}


void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fp().empty()) {
    _internal_set_fp(from._internal_fp());
  }
  if (!from._internal_tp().empty()) {
    _internal_set_tp(from._internal_tp());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::InternalSwap(RenameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fp_, lhs_arena,
      &other->fp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tp_, lhs_arena,
      &other->tp_, rhs_arena
  );
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[13]);
}

// ===================================================================

class UtimensRequest::_Internal {
 public:
};

UtimensRequest::UtimensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.UtimensRequest)
}
UtimensRequest::UtimensRequest(const UtimensRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&nsec_, &from.nsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&nsec2_) -
    reinterpret_cast<char*>(&nsec_)) + sizeof(nsec2_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.UtimensRequest)
}

void UtimensRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nsec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nsec2_) -
    reinterpret_cast<char*>(&nsec_)) + sizeof(nsec2_));
}

UtimensRequest::~UtimensRequest() {
  // @@protoc_insertion_point(destructor:afsfuse.UtimensRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtimensRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UtimensRequest::ArenaDtor(void* object) {
  UtimensRequest* _this = reinterpret_cast< UtimensRequest* >(object);
  (void)_this;
}
void UtimensRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtimensRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtimensRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.UtimensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  ::memset(&nsec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nsec2_) -
      reinterpret_cast<char*>(&nsec_)) + sizeof(nsec2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtimensRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.UtimensRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nsec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sec2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sec2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nsec2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nsec2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtimensRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.UtimensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.UtimensRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // int32 sec = 2;
  if (this->_internal_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sec(), target);
  }

  // int64 nsec = 3;
  if (this->_internal_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_nsec(), target);
  }

  // int32 sec2 = 4;
  if (this->_internal_sec2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sec2(), target);
  }

  // int64 nsec2 = 5;
  if (this->_internal_nsec2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_nsec2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.UtimensRequest)
  return target;
}

size_t UtimensRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.UtimensRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int64 nsec = 3;
  if (this->_internal_nsec() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_nsec());
  }

  // int32 sec = 2;
  if (this->_internal_sec() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sec());
  }

  // int32 sec2 = 4;
  if (this->_internal_sec2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sec2());
  }

  // int64 nsec2 = 5;
  if (this->_internal_nsec2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_nsec2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtimensRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtimensRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtimensRequest::GetClassData() const { return &_class_data_; }

void UtimensRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UtimensRequest *>(to)->MergeFrom(
      static_cast<const UtimensRequest &>(from));
}


void UtimensRequest::MergeFrom(const UtimensRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.UtimensRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_nsec() != 0) {
    _internal_set_nsec(from._internal_nsec());
  }
  if (from._internal_sec() != 0) {
    _internal_set_sec(from._internal_sec());
  }
  if (from._internal_sec2() != 0) {
    _internal_set_sec2(from._internal_sec2());
  }
  if (from._internal_nsec2() != 0) {
    _internal_set_nsec2(from._internal_nsec2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtimensRequest::CopyFrom(const UtimensRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.UtimensRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtimensRequest::IsInitialized() const {
  return true;
}

void UtimensRequest::InternalSwap(UtimensRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtimensRequest, nsec2_)
      + sizeof(UtimensRequest::nsec2_)
      - PROTOBUF_FIELD_OFFSET(UtimensRequest, nsec_)>(
          reinterpret_cast<char*>(&nsec_),
          reinterpret_cast<char*>(&other->nsec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtimensRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[14]);
}

// ===================================================================

class MknodRequest::_Internal {
 public:
};

MknodRequest::MknodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.MknodRequest)
}
MknodRequest::MknodRequest(const MknodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&rdev_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(rdev_));
  // @@protoc_insertion_point(copy_constructor:afsfuse.MknodRequest)
}

void MknodRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rdev_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(rdev_));
}

MknodRequest::~MknodRequest() {
  // @@protoc_insertion_point(destructor:afsfuse.MknodRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MknodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MknodRequest::ArenaDtor(void* object) {
  MknodRequest* _this = reinterpret_cast< MknodRequest* >(object);
  (void)_this;
}
void MknodRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MknodRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MknodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.MknodRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rdev_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(rdev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MknodRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.MknodRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rdev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rdev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MknodRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.MknodRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.MknodRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // uint32 rdev = 3;
  if (this->_internal_rdev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rdev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.MknodRequest)
  return target;
}

size_t MknodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.MknodRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // uint32 rdev = 3;
  if (this->_internal_rdev() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rdev());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MknodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MknodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MknodRequest::GetClassData() const { return &_class_data_; }

void MknodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MknodRequest *>(to)->MergeFrom(
      static_cast<const MknodRequest &>(from));
}


void MknodRequest::MergeFrom(const MknodRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.MknodRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_rdev() != 0) {
    _internal_set_rdev(from._internal_rdev());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MknodRequest::CopyFrom(const MknodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.MknodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MknodRequest::IsInitialized() const {
  return true;
}

void MknodRequest::InternalSwap(MknodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MknodRequest, rdev_)
      + sizeof(MknodRequest::rdev_)
      - PROTOBUF_FIELD_OFFSET(MknodRequest, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MknodRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[15]);
}

// ===================================================================

class FileContent::_Internal {
 public:
};

FileContent::FileContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.FileContent)
}
FileContent::FileContent(const FileContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:afsfuse.FileContent)
}

void FileContent::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

FileContent::~FileContent() {
  // @@protoc_insertion_point(destructor:afsfuse.FileContent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FileContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileContent::ArenaDtor(void* object) {
  FileContent* _this = reinterpret_cast< FileContent* >(object);
  (void)_this;
}
void FileContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileContent::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.FileContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  content_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.FileContent.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.FileContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.FileContent.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.FileContent)
  return target;
}

size_t FileContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.FileContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileContent::GetClassData() const { return &_class_data_; }

void FileContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileContent *>(to)->MergeFrom(
      static_cast<const FileContent &>(from));
}


void FileContent::MergeFrom(const FileContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.FileContent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileContent::CopyFrom(const FileContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.FileContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileContent::IsInitialized() const {
  return true;
}

void FileContent::InternalSwap(FileContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileContent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[16]);
}

// ===================================================================

class File::_Internal {
 public:
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afsfuse.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afsfuse.File)
}

void File::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

File::~File() {
  // @@protoc_insertion_point(destructor:afsfuse.File)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void File::ArenaDtor(void* object) {
  File* _this = reinterpret_cast< File* >(object);
  (void)_this;
}
void File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:afsfuse.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afsfuse.File.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afsfuse.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afsfuse.File.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afsfuse.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afsfuse.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }

void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<File *>(to)->MergeFrom(
      static_cast<const File &>(from));
}


void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afsfuse.File)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afsfuse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afsfuse_2eproto_getter, &descriptor_table_afsfuse_2eproto_once,
      file_level_metadata_afsfuse_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace afsfuse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::afsfuse::SerializeByte* Arena::CreateMaybeMessage< ::afsfuse::SerializeByte >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::SerializeByte >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::String* Arena::CreateMaybeMessage< ::afsfuse::String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::String >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::Dirent* Arena::CreateMaybeMessage< ::afsfuse::Dirent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::Dirent >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::Stat* Arena::CreateMaybeMessage< ::afsfuse::Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::FuseFileInfo* Arena::CreateMaybeMessage< ::afsfuse::FuseFileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::FuseFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::ReadResult* Arena::CreateMaybeMessage< ::afsfuse::ReadResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::ReadResult >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::ReadRequest* Arena::CreateMaybeMessage< ::afsfuse::ReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::ReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::WriteRequest* Arena::CreateMaybeMessage< ::afsfuse::WriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::WriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::WriteResult* Arena::CreateMaybeMessage< ::afsfuse::WriteResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::WriteResult >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::CreateRequest* Arena::CreateMaybeMessage< ::afsfuse::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::CreateResult* Arena::CreateMaybeMessage< ::afsfuse::CreateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::CreateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::MkdirRequest* Arena::CreateMaybeMessage< ::afsfuse::MkdirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::MkdirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::OutputInfo* Arena::CreateMaybeMessage< ::afsfuse::OutputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::RenameRequest* Arena::CreateMaybeMessage< ::afsfuse::RenameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::RenameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::UtimensRequest* Arena::CreateMaybeMessage< ::afsfuse::UtimensRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::UtimensRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::MknodRequest* Arena::CreateMaybeMessage< ::afsfuse::MknodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::MknodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::FileContent* Arena::CreateMaybeMessage< ::afsfuse::FileContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::FileContent >(arena);
}
template<> PROTOBUF_NOINLINE ::afsfuse::File* Arena::CreateMaybeMessage< ::afsfuse::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afsfuse::File >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
