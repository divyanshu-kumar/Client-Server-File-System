// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: afsfuse.proto
#ifndef GRPC_afsfuse_2eproto__INCLUDED
#define GRPC_afsfuse_2eproto__INCLUDED

#include "afsfuse.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace afsfuse {

class AFS final {
 public:
  static constexpr char const* service_full_name() {
    return "afsfuse.AFS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::Stat* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::Stat>> Asyncafsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::Stat>>(Asyncafsfuse_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::Stat>> PrepareAsyncafsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::Stat>>(PrepareAsyncafsfuse_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::afsfuse::Dirent>> afsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::afsfuse::Dirent>>(afsfuse_readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::Dirent>> Asyncafsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::Dirent>>(Asyncafsfuse_readdirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::Dirent>> PrepareAsyncafsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::Dirent>>(PrepareAsyncafsfuse_readdirRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::afsfuse::FuseFileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::FuseFileInfo>> Asyncafsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::FuseFileInfo>>(Asyncafsfuse_openRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::FuseFileInfo>> PrepareAsyncafsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::FuseFileInfo>>(PrepareAsyncafsfuse_openRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::afsfuse::ReadResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::ReadResult>> Asyncafsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::ReadResult>>(Asyncafsfuse_readRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::ReadResult>> PrepareAsyncafsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::ReadResult>>(PrepareAsyncafsfuse_readRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::afsfuse::WriteResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::WriteResult>> Asyncafsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::WriteResult>>(Asyncafsfuse_writeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::WriteResult>> PrepareAsyncafsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::WriteResult>>(PrepareAsyncafsfuse_writeRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::afsfuse::CreateResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::CreateResult>> Asyncafsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::CreateResult>>(Asyncafsfuse_createRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::CreateResult>> PrepareAsyncafsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::CreateResult>>(PrepareAsyncafsfuse_createRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::afsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> Asyncafsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(Asyncafsfuse_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_mkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> Asyncafsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(Asyncafsfuse_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_rmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> Asyncafsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(Asyncafsfuse_unlinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_unlinkRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::afsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> Asyncafsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(Asyncafsfuse_renameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_renameRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::afsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> Asyncafsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(Asyncafsfuse_utimensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_utimensRaw(context, request, cq));
    }
    virtual ::grpc::Status afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::afsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> Asyncafsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(Asyncafsfuse_mknodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_mknodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::afsfuse::FileContent>> afsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::afsfuse::FileContent>>(afsfuse_putFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::afsfuse::FileContent>> Asyncafsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::afsfuse::FileContent>>(Asyncafsfuse_putFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::afsfuse::FileContent>> PrepareAsyncafsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::afsfuse::FileContent>>(PrepareAsyncafsfuse_putFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::afsfuse::FileContent>> afsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::afsfuse::FileContent>>(afsfuse_getFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::FileContent>> Asyncafsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::FileContent>>(Asyncafsfuse_getFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::FileContent>> PrepareAsyncafsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsfuse::FileContent>>(PrepareAsyncafsfuse_getFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::grpc::ClientReadReactor< ::afsfuse::Dirent>* reactor) = 0;
      virtual void afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void afsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::ClientWriteReactor< ::afsfuse::FileContent>* reactor) = 0;
      virtual void afsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File* request, ::grpc::ClientReadReactor< ::afsfuse::FileContent>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::Stat>* Asyncafsfuse_getattrRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::Stat>* PrepareAsyncafsfuse_getattrRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::afsfuse::Dirent>* afsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::afsfuse::Dirent>* Asyncafsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::afsfuse::Dirent>* PrepareAsyncafsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::FuseFileInfo>* Asyncafsfuse_openRaw(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::FuseFileInfo>* PrepareAsyncafsfuse_openRaw(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::ReadResult>* Asyncafsfuse_readRaw(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::ReadResult>* PrepareAsyncafsfuse_readRaw(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::WriteResult>* Asyncafsfuse_writeRaw(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::WriteResult>* PrepareAsyncafsfuse_writeRaw(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::CreateResult>* Asyncafsfuse_createRaw(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::CreateResult>* PrepareAsyncafsfuse_createRaw(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* Asyncafsfuse_mkdirRaw(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_mkdirRaw(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* Asyncafsfuse_rmdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_rmdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* Asyncafsfuse_unlinkRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_unlinkRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* Asyncafsfuse_renameRaw(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_renameRaw(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* Asyncafsfuse_utimensRaw(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_utimensRaw(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* Asyncafsfuse_mknodRaw(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_mknodRaw(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::afsfuse::FileContent>* afsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::afsfuse::FileContent>* Asyncafsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::afsfuse::FileContent>* PrepareAsyncafsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::afsfuse::FileContent>* afsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::afsfuse::FileContent>* Asyncafsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::afsfuse::FileContent>* PrepareAsyncafsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::Stat* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>> Asyncafsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>>(Asyncafsfuse_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>> PrepareAsyncafsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>>(PrepareAsyncafsfuse_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::afsfuse::Dirent>> afsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::afsfuse::Dirent>>(afsfuse_readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::Dirent>> Asyncafsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::Dirent>>(Asyncafsfuse_readdirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::Dirent>> PrepareAsyncafsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::Dirent>>(PrepareAsyncafsfuse_readdirRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::afsfuse::FuseFileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>> Asyncafsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>>(Asyncafsfuse_openRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>> PrepareAsyncafsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>>(PrepareAsyncafsfuse_openRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::afsfuse::ReadResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>> Asyncafsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>>(Asyncafsfuse_readRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>> PrepareAsyncafsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>>(PrepareAsyncafsfuse_readRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::afsfuse::WriteResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>> Asyncafsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>>(Asyncafsfuse_writeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>> PrepareAsyncafsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>>(PrepareAsyncafsfuse_writeRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::afsfuse::CreateResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>> Asyncafsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>>(Asyncafsfuse_createRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>> PrepareAsyncafsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>>(PrepareAsyncafsfuse_createRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::afsfuse::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> Asyncafsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(Asyncafsfuse_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_mkdirRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> Asyncafsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(Asyncafsfuse_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_rmdirRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> Asyncafsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(Asyncafsfuse_unlinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_unlinkRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::afsfuse::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> Asyncafsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(Asyncafsfuse_renameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_renameRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::afsfuse::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> Asyncafsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(Asyncafsfuse_utimensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_utimensRaw(context, request, cq));
    }
    ::grpc::Status afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::afsfuse::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> Asyncafsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(Asyncafsfuse_mknodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>> PrepareAsyncafsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>>(PrepareAsyncafsfuse_mknodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::afsfuse::FileContent>> afsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::afsfuse::FileContent>>(afsfuse_putFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::afsfuse::FileContent>> Asyncafsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::afsfuse::FileContent>>(Asyncafsfuse_putFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::afsfuse::FileContent>> PrepareAsyncafsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::afsfuse::FileContent>>(PrepareAsyncafsfuse_putFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::afsfuse::FileContent>> afsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::afsfuse::FileContent>>(afsfuse_getFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::FileContent>> Asyncafsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::FileContent>>(Asyncafsfuse_getFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::FileContent>> PrepareAsyncafsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::afsfuse::FileContent>>(PrepareAsyncafsfuse_getFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::grpc::ClientReadReactor< ::afsfuse::Dirent>* reactor) override;
      void afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void afsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::ClientWriteReactor< ::afsfuse::FileContent>* reactor) override;
      void afsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File* request, ::grpc::ClientReadReactor< ::afsfuse::FileContent>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>* Asyncafsfuse_getattrRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>* PrepareAsyncafsfuse_getattrRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::afsfuse::Dirent>* afsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request) override;
    ::grpc::ClientAsyncReader< ::afsfuse::Dirent>* Asyncafsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::afsfuse::Dirent>* PrepareAsyncafsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>* Asyncafsfuse_openRaw(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>* PrepareAsyncafsfuse_openRaw(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>* Asyncafsfuse_readRaw(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>* PrepareAsyncafsfuse_readRaw(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>* Asyncafsfuse_writeRaw(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>* PrepareAsyncafsfuse_writeRaw(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>* Asyncafsfuse_createRaw(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>* PrepareAsyncafsfuse_createRaw(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* Asyncafsfuse_mkdirRaw(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_mkdirRaw(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* Asyncafsfuse_rmdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_rmdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* Asyncafsfuse_unlinkRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_unlinkRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* Asyncafsfuse_renameRaw(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_renameRaw(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* Asyncafsfuse_utimensRaw(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_utimensRaw(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* Asyncafsfuse_mknodRaw(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* PrepareAsyncafsfuse_mknodRaw(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::afsfuse::FileContent>* afsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response) override;
    ::grpc::ClientAsyncWriter< ::afsfuse::FileContent>* Asyncafsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::afsfuse::FileContent>* PrepareAsyncafsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::afsfuse::FileContent>* afsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request) override;
    ::grpc::ClientAsyncReader< ::afsfuse::FileContent>* Asyncafsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::afsfuse::FileContent>* PrepareAsyncafsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_getattr_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_readdir_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_open_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_read_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_write_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_create_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_rmdir_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_unlink_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_rename_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_utimens_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_mknod_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_putFile_;
    const ::grpc::internal::RpcMethod rpcmethod_afsfuse_getFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status afsfuse_getattr(::grpc::ServerContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response);
    virtual ::grpc::Status afsfuse_readdir(::grpc::ServerContext* context, const ::afsfuse::String* request, ::grpc::ServerWriter< ::afsfuse::Dirent>* writer);
    virtual ::grpc::Status afsfuse_open(::grpc::ServerContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response);
    virtual ::grpc::Status afsfuse_read(::grpc::ServerContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response);
    virtual ::grpc::Status afsfuse_write(::grpc::ServerContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response);
    virtual ::grpc::Status afsfuse_create(::grpc::ServerContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response);
    virtual ::grpc::Status afsfuse_mkdir(::grpc::ServerContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response);
    virtual ::grpc::Status afsfuse_rmdir(::grpc::ServerContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response);
    virtual ::grpc::Status afsfuse_unlink(::grpc::ServerContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response);
    virtual ::grpc::Status afsfuse_rename(::grpc::ServerContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response);
    virtual ::grpc::Status afsfuse_utimens(::grpc::ServerContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response);
    virtual ::grpc::Status afsfuse_mknod(::grpc::ServerContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response);
    virtual ::grpc::Status afsfuse_putFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::afsfuse::FileContent>* reader, ::afsfuse::OutputInfo* response);
    virtual ::grpc::Status afsfuse_getFile(::grpc::ServerContext* context, const ::afsfuse::File* request, ::grpc::ServerWriter< ::afsfuse::FileContent>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_getattr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_afsfuse_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getattr(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::Stat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_getattr(::grpc::ServerContext* context, ::afsfuse::String* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::Stat>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_readdir() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_afsfuse_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_readdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::grpc::ServerWriter< ::afsfuse::Dirent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_readdir(::grpc::ServerContext* context, ::afsfuse::String* request, ::grpc::ServerAsyncWriter< ::afsfuse::Dirent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_open() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_afsfuse_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_open(::grpc::ServerContext* /*context*/, const ::afsfuse::FuseFileInfo* /*request*/, ::afsfuse::FuseFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_open(::grpc::ServerContext* context, ::afsfuse::FuseFileInfo* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::FuseFileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_read() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_afsfuse_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_read(::grpc::ServerContext* /*context*/, const ::afsfuse::ReadRequest* /*request*/, ::afsfuse::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_read(::grpc::ServerContext* context, ::afsfuse::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::ReadResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_write() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_afsfuse_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_write(::grpc::ServerContext* /*context*/, const ::afsfuse::WriteRequest* /*request*/, ::afsfuse::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_write(::grpc::ServerContext* context, ::afsfuse::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::WriteResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_create() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_afsfuse_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_create(::grpc::ServerContext* /*context*/, const ::afsfuse::CreateRequest* /*request*/, ::afsfuse::CreateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_create(::grpc::ServerContext* context, ::afsfuse::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::CreateResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_mkdir() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_afsfuse_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mkdir(::grpc::ServerContext* /*context*/, const ::afsfuse::MkdirRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_mkdir(::grpc::ServerContext* context, ::afsfuse::MkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_rmdir() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_afsfuse_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rmdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_rmdir(::grpc::ServerContext* context, ::afsfuse::String* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_unlink() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_afsfuse_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_unlink(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_unlink(::grpc::ServerContext* context, ::afsfuse::String* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_rename() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_afsfuse_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rename(::grpc::ServerContext* /*context*/, const ::afsfuse::RenameRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_rename(::grpc::ServerContext* context, ::afsfuse::RenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_utimens() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_afsfuse_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_utimens(::grpc::ServerContext* /*context*/, const ::afsfuse::UtimensRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_utimens(::grpc::ServerContext* context, ::afsfuse::UtimensRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_mknod() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_afsfuse_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mknod(::grpc::ServerContext* /*context*/, const ::afsfuse::MknodRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_mknod(::grpc::ServerContext* context, ::afsfuse::MknodRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_putFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_putFile() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_afsfuse_putFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_putFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::afsfuse::FileContent>* /*reader*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_putFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::afsfuse::OutputInfo, ::afsfuse::FileContent>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(12, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_afsfuse_getFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_afsfuse_getFile() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_afsfuse_getFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getFile(::grpc::ServerContext* /*context*/, const ::afsfuse::File* /*request*/, ::grpc::ServerWriter< ::afsfuse::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_getFile(::grpc::ServerContext* context, ::afsfuse::File* request, ::grpc::ServerAsyncWriter< ::afsfuse::FileContent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_afsfuse_getattr<WithAsyncMethod_afsfuse_readdir<WithAsyncMethod_afsfuse_open<WithAsyncMethod_afsfuse_read<WithAsyncMethod_afsfuse_write<WithAsyncMethod_afsfuse_create<WithAsyncMethod_afsfuse_mkdir<WithAsyncMethod_afsfuse_rmdir<WithAsyncMethod_afsfuse_unlink<WithAsyncMethod_afsfuse_rename<WithAsyncMethod_afsfuse_utimens<WithAsyncMethod_afsfuse_mknod<WithAsyncMethod_afsfuse_putFile<WithAsyncMethod_afsfuse_getFile<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_getattr() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::String, ::afsfuse::Stat>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response) { return this->afsfuse_getattr(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_getattr(
        ::grpc::MessageAllocator< ::afsfuse::String, ::afsfuse::Stat>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::String, ::afsfuse::Stat>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getattr(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::Stat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_getattr(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::Stat* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_readdir() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::afsfuse::String, ::afsfuse::Dirent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::String* request) { return this->afsfuse_readdir(context, request); }));
    }
    ~WithCallbackMethod_afsfuse_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_readdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::grpc::ServerWriter< ::afsfuse::Dirent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::afsfuse::Dirent>* afsfuse_readdir(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::String* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_open() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response) { return this->afsfuse_open(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_open(
        ::grpc::MessageAllocator< ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_open(::grpc::ServerContext* /*context*/, const ::afsfuse::FuseFileInfo* /*request*/, ::afsfuse::FuseFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_open(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::FuseFileInfo* /*request*/, ::afsfuse::FuseFileInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_read() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::ReadRequest, ::afsfuse::ReadResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response) { return this->afsfuse_read(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_read(
        ::grpc::MessageAllocator< ::afsfuse::ReadRequest, ::afsfuse::ReadResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::ReadRequest, ::afsfuse::ReadResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_read(::grpc::ServerContext* /*context*/, const ::afsfuse::ReadRequest* /*request*/, ::afsfuse::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_read(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::ReadRequest* /*request*/, ::afsfuse::ReadResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_write() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::WriteRequest, ::afsfuse::WriteResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response) { return this->afsfuse_write(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_write(
        ::grpc::MessageAllocator< ::afsfuse::WriteRequest, ::afsfuse::WriteResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::WriteRequest, ::afsfuse::WriteResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_write(::grpc::ServerContext* /*context*/, const ::afsfuse::WriteRequest* /*request*/, ::afsfuse::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_write(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::WriteRequest* /*request*/, ::afsfuse::WriteResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_create() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::CreateRequest, ::afsfuse::CreateResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response) { return this->afsfuse_create(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_create(
        ::grpc::MessageAllocator< ::afsfuse::CreateRequest, ::afsfuse::CreateResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::CreateRequest, ::afsfuse::CreateResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_create(::grpc::ServerContext* /*context*/, const ::afsfuse::CreateRequest* /*request*/, ::afsfuse::CreateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_create(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::CreateRequest* /*request*/, ::afsfuse::CreateResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_mkdir() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response) { return this->afsfuse_mkdir(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_mkdir(
        ::grpc::MessageAllocator< ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mkdir(::grpc::ServerContext* /*context*/, const ::afsfuse::MkdirRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::MkdirRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_rmdir() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::String, ::afsfuse::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response) { return this->afsfuse_rmdir(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_rmdir(
        ::grpc::MessageAllocator< ::afsfuse::String, ::afsfuse::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::String, ::afsfuse::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rmdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_rmdir(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_unlink() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::String, ::afsfuse::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response) { return this->afsfuse_unlink(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_unlink(
        ::grpc::MessageAllocator< ::afsfuse::String, ::afsfuse::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::String, ::afsfuse::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_unlink(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_unlink(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_rename() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::RenameRequest, ::afsfuse::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response) { return this->afsfuse_rename(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_rename(
        ::grpc::MessageAllocator< ::afsfuse::RenameRequest, ::afsfuse::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::RenameRequest, ::afsfuse::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rename(::grpc::ServerContext* /*context*/, const ::afsfuse::RenameRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_rename(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::RenameRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_utimens() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response) { return this->afsfuse_utimens(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_utimens(
        ::grpc::MessageAllocator< ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_utimens(::grpc::ServerContext* /*context*/, const ::afsfuse::UtimensRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_utimens(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::UtimensRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_mknod() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::afsfuse::MknodRequest, ::afsfuse::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response) { return this->afsfuse_mknod(context, request, response); }));}
    void SetMessageAllocatorFor_afsfuse_mknod(
        ::grpc::MessageAllocator< ::afsfuse::MknodRequest, ::afsfuse::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsfuse::MknodRequest, ::afsfuse::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_afsfuse_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mknod(::grpc::ServerContext* /*context*/, const ::afsfuse::MknodRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_mknod(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::MknodRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_putFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_putFile() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackClientStreamingHandler< ::afsfuse::FileContent, ::afsfuse::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, ::afsfuse::OutputInfo* response) { return this->afsfuse_putFile(context, response); }));
    }
    ~WithCallbackMethod_afsfuse_putFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_putFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::afsfuse::FileContent>* /*reader*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::afsfuse::FileContent>* afsfuse_putFile(
      ::grpc::CallbackServerContext* /*context*/, ::afsfuse::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_afsfuse_getFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_afsfuse_getFile() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::afsfuse::File, ::afsfuse::FileContent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsfuse::File* request) { return this->afsfuse_getFile(context, request); }));
    }
    ~WithCallbackMethod_afsfuse_getFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getFile(::grpc::ServerContext* /*context*/, const ::afsfuse::File* /*request*/, ::grpc::ServerWriter< ::afsfuse::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::afsfuse::FileContent>* afsfuse_getFile(
      ::grpc::CallbackServerContext* /*context*/, const ::afsfuse::File* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_afsfuse_getattr<WithCallbackMethod_afsfuse_readdir<WithCallbackMethod_afsfuse_open<WithCallbackMethod_afsfuse_read<WithCallbackMethod_afsfuse_write<WithCallbackMethod_afsfuse_create<WithCallbackMethod_afsfuse_mkdir<WithCallbackMethod_afsfuse_rmdir<WithCallbackMethod_afsfuse_unlink<WithCallbackMethod_afsfuse_rename<WithCallbackMethod_afsfuse_utimens<WithCallbackMethod_afsfuse_mknod<WithCallbackMethod_afsfuse_putFile<WithCallbackMethod_afsfuse_getFile<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_afsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_getattr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_afsfuse_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getattr(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::Stat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_readdir() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_afsfuse_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_readdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::grpc::ServerWriter< ::afsfuse::Dirent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_open() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_afsfuse_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_open(::grpc::ServerContext* /*context*/, const ::afsfuse::FuseFileInfo* /*request*/, ::afsfuse::FuseFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_read() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_afsfuse_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_read(::grpc::ServerContext* /*context*/, const ::afsfuse::ReadRequest* /*request*/, ::afsfuse::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_write() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_afsfuse_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_write(::grpc::ServerContext* /*context*/, const ::afsfuse::WriteRequest* /*request*/, ::afsfuse::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_create() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_afsfuse_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_create(::grpc::ServerContext* /*context*/, const ::afsfuse::CreateRequest* /*request*/, ::afsfuse::CreateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_mkdir() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_afsfuse_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mkdir(::grpc::ServerContext* /*context*/, const ::afsfuse::MkdirRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_rmdir() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_afsfuse_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rmdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_unlink() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_afsfuse_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_unlink(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_rename() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_afsfuse_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rename(::grpc::ServerContext* /*context*/, const ::afsfuse::RenameRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_utimens() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_afsfuse_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_utimens(::grpc::ServerContext* /*context*/, const ::afsfuse::UtimensRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_mknod() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_afsfuse_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mknod(::grpc::ServerContext* /*context*/, const ::afsfuse::MknodRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_putFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_putFile() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_afsfuse_putFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_putFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::afsfuse::FileContent>* /*reader*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_afsfuse_getFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_afsfuse_getFile() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_afsfuse_getFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getFile(::grpc::ServerContext* /*context*/, const ::afsfuse::File* /*request*/, ::grpc::ServerWriter< ::afsfuse::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_getattr() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_afsfuse_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getattr(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::Stat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_getattr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_readdir() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_afsfuse_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_readdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::grpc::ServerWriter< ::afsfuse::Dirent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_readdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_open() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_afsfuse_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_open(::grpc::ServerContext* /*context*/, const ::afsfuse::FuseFileInfo* /*request*/, ::afsfuse::FuseFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_open(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_read() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_afsfuse_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_read(::grpc::ServerContext* /*context*/, const ::afsfuse::ReadRequest* /*request*/, ::afsfuse::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_read(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_write() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_afsfuse_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_write(::grpc::ServerContext* /*context*/, const ::afsfuse::WriteRequest* /*request*/, ::afsfuse::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_write(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_create() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_afsfuse_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_create(::grpc::ServerContext* /*context*/, const ::afsfuse::CreateRequest* /*request*/, ::afsfuse::CreateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_create(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_mkdir() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_afsfuse_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mkdir(::grpc::ServerContext* /*context*/, const ::afsfuse::MkdirRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_mkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_rmdir() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_afsfuse_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rmdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_rmdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_unlink() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_afsfuse_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_unlink(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_unlink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_rename() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_afsfuse_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rename(::grpc::ServerContext* /*context*/, const ::afsfuse::RenameRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_rename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_utimens() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_afsfuse_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_utimens(::grpc::ServerContext* /*context*/, const ::afsfuse::UtimensRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_utimens(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_mknod() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_afsfuse_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mknod(::grpc::ServerContext* /*context*/, const ::afsfuse::MknodRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_mknod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_putFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_putFile() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_afsfuse_putFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_putFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::afsfuse::FileContent>* /*reader*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_putFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(12, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_afsfuse_getFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_afsfuse_getFile() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_afsfuse_getFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getFile(::grpc::ServerContext* /*context*/, const ::afsfuse::File* /*request*/, ::grpc::ServerWriter< ::afsfuse::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestafsfuse_getFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_getattr() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_getattr(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getattr(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::Stat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_getattr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_readdir() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->afsfuse_readdir(context, request); }));
    }
    ~WithRawCallbackMethod_afsfuse_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_readdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::grpc::ServerWriter< ::afsfuse::Dirent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* afsfuse_readdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_open() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_open(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_open(::grpc::ServerContext* /*context*/, const ::afsfuse::FuseFileInfo* /*request*/, ::afsfuse::FuseFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_open(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_read() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_read(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_read(::grpc::ServerContext* /*context*/, const ::afsfuse::ReadRequest* /*request*/, ::afsfuse::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_write() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_write(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_write(::grpc::ServerContext* /*context*/, const ::afsfuse::WriteRequest* /*request*/, ::afsfuse::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_create() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_create(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_create(::grpc::ServerContext* /*context*/, const ::afsfuse::CreateRequest* /*request*/, ::afsfuse::CreateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_mkdir() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_mkdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mkdir(::grpc::ServerContext* /*context*/, const ::afsfuse::MkdirRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_rmdir() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_rmdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rmdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_rmdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_unlink() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_unlink(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_unlink(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_unlink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_rename() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_rename(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_rename(::grpc::ServerContext* /*context*/, const ::afsfuse::RenameRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_rename(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_utimens() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_utimens(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_utimens(::grpc::ServerContext* /*context*/, const ::afsfuse::UtimensRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_utimens(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_mknod() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->afsfuse_mknod(context, request, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_mknod(::grpc::ServerContext* /*context*/, const ::afsfuse::MknodRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* afsfuse_mknod(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_putFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_putFile() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->afsfuse_putFile(context, response); }));
    }
    ~WithRawCallbackMethod_afsfuse_putFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_putFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::afsfuse::FileContent>* /*reader*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* afsfuse_putFile(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_afsfuse_getFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_afsfuse_getFile() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->afsfuse_getFile(context, request); }));
    }
    ~WithRawCallbackMethod_afsfuse_getFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status afsfuse_getFile(::grpc::ServerContext* /*context*/, const ::afsfuse::File* /*request*/, ::grpc::ServerWriter< ::afsfuse::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* afsfuse_getFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_getattr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::String, ::afsfuse::Stat>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::String, ::afsfuse::Stat>* streamer) {
                       return this->Streamedafsfuse_getattr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_getattr(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::Stat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_getattr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::String,::afsfuse::Stat>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_open() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo>* streamer) {
                       return this->Streamedafsfuse_open(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_open(::grpc::ServerContext* /*context*/, const ::afsfuse::FuseFileInfo* /*request*/, ::afsfuse::FuseFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_open(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::FuseFileInfo,::afsfuse::FuseFileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_read() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::ReadRequest, ::afsfuse::ReadResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::ReadRequest, ::afsfuse::ReadResult>* streamer) {
                       return this->Streamedafsfuse_read(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_read(::grpc::ServerContext* /*context*/, const ::afsfuse::ReadRequest* /*request*/, ::afsfuse::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_read(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::ReadRequest,::afsfuse::ReadResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_write() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::WriteRequest, ::afsfuse::WriteResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::WriteRequest, ::afsfuse::WriteResult>* streamer) {
                       return this->Streamedafsfuse_write(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_write(::grpc::ServerContext* /*context*/, const ::afsfuse::WriteRequest* /*request*/, ::afsfuse::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_write(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::WriteRequest,::afsfuse::WriteResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_create() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::CreateRequest, ::afsfuse::CreateResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::CreateRequest, ::afsfuse::CreateResult>* streamer) {
                       return this->Streamedafsfuse_create(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_create(::grpc::ServerContext* /*context*/, const ::afsfuse::CreateRequest* /*request*/, ::afsfuse::CreateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_create(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::CreateRequest,::afsfuse::CreateResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_mkdir() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo>* streamer) {
                       return this->Streamedafsfuse_mkdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_mkdir(::grpc::ServerContext* /*context*/, const ::afsfuse::MkdirRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_mkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::MkdirRequest,::afsfuse::OutputInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_rmdir() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::String, ::afsfuse::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::String, ::afsfuse::OutputInfo>* streamer) {
                       return this->Streamedafsfuse_rmdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_rmdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_rmdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::String,::afsfuse::OutputInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_unlink() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::String, ::afsfuse::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::String, ::afsfuse::OutputInfo>* streamer) {
                       return this->Streamedafsfuse_unlink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_unlink(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_unlink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::String,::afsfuse::OutputInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_rename() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::RenameRequest, ::afsfuse::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::RenameRequest, ::afsfuse::OutputInfo>* streamer) {
                       return this->Streamedafsfuse_rename(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_rename(::grpc::ServerContext* /*context*/, const ::afsfuse::RenameRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_rename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::RenameRequest,::afsfuse::OutputInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_utimens() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo>* streamer) {
                       return this->Streamedafsfuse_utimens(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_utimens(::grpc::ServerContext* /*context*/, const ::afsfuse::UtimensRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_utimens(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::UtimensRequest,::afsfuse::OutputInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_afsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_afsfuse_mknod() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsfuse::MknodRequest, ::afsfuse::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsfuse::MknodRequest, ::afsfuse::OutputInfo>* streamer) {
                       return this->Streamedafsfuse_mknod(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_afsfuse_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_mknod(::grpc::ServerContext* /*context*/, const ::afsfuse::MknodRequest* /*request*/, ::afsfuse::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedafsfuse_mknod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsfuse::MknodRequest,::afsfuse::OutputInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_afsfuse_getattr<WithStreamedUnaryMethod_afsfuse_open<WithStreamedUnaryMethod_afsfuse_read<WithStreamedUnaryMethod_afsfuse_write<WithStreamedUnaryMethod_afsfuse_create<WithStreamedUnaryMethod_afsfuse_mkdir<WithStreamedUnaryMethod_afsfuse_rmdir<WithStreamedUnaryMethod_afsfuse_unlink<WithStreamedUnaryMethod_afsfuse_rename<WithStreamedUnaryMethod_afsfuse_utimens<WithStreamedUnaryMethod_afsfuse_mknod<Service > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_afsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_afsfuse_readdir() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::afsfuse::String, ::afsfuse::Dirent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::afsfuse::String, ::afsfuse::Dirent>* streamer) {
                       return this->Streamedafsfuse_readdir(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_afsfuse_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_readdir(::grpc::ServerContext* /*context*/, const ::afsfuse::String* /*request*/, ::grpc::ServerWriter< ::afsfuse::Dirent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedafsfuse_readdir(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::afsfuse::String,::afsfuse::Dirent>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_afsfuse_getFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_afsfuse_getFile() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::afsfuse::File, ::afsfuse::FileContent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::afsfuse::File, ::afsfuse::FileContent>* streamer) {
                       return this->Streamedafsfuse_getFile(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_afsfuse_getFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status afsfuse_getFile(::grpc::ServerContext* /*context*/, const ::afsfuse::File* /*request*/, ::grpc::ServerWriter< ::afsfuse::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedafsfuse_getFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::afsfuse::File,::afsfuse::FileContent>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_afsfuse_readdir<WithSplitStreamingMethod_afsfuse_getFile<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_afsfuse_getattr<WithSplitStreamingMethod_afsfuse_readdir<WithStreamedUnaryMethod_afsfuse_open<WithStreamedUnaryMethod_afsfuse_read<WithStreamedUnaryMethod_afsfuse_write<WithStreamedUnaryMethod_afsfuse_create<WithStreamedUnaryMethod_afsfuse_mkdir<WithStreamedUnaryMethod_afsfuse_rmdir<WithStreamedUnaryMethod_afsfuse_unlink<WithStreamedUnaryMethod_afsfuse_rename<WithStreamedUnaryMethod_afsfuse_utimens<WithStreamedUnaryMethod_afsfuse_mknod<WithSplitStreamingMethod_afsfuse_getFile<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace afsfuse


#endif  // GRPC_afsfuse_2eproto__INCLUDED
