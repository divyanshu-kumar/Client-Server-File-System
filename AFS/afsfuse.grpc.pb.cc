// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: afsfuse.proto

#include "afsfuse.pb.h"
#include "afsfuse.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace afsfuse {

static const char* AFS_method_names[] = {
  "/afsfuse.AFS/afsfuse_getattr",
  "/afsfuse.AFS/afsfuse_readdir",
  "/afsfuse.AFS/afsfuse_open",
  "/afsfuse.AFS/afsfuse_read",
  "/afsfuse.AFS/afsfuse_write",
  "/afsfuse.AFS/afsfuse_create",
  "/afsfuse.AFS/afsfuse_mkdir",
  "/afsfuse.AFS/afsfuse_rmdir",
  "/afsfuse.AFS/afsfuse_unlink",
  "/afsfuse.AFS/afsfuse_rename",
  "/afsfuse.AFS/afsfuse_utimens",
  "/afsfuse.AFS/afsfuse_mknod",
  "/afsfuse.AFS/afsfuse_putFile",
  "/afsfuse.AFS/afsfuse_getFile",
};

std::unique_ptr< AFS::Stub> AFS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AFS::Stub> stub(new AFS::Stub(channel, options));
  return stub;
}

AFS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_afsfuse_getattr_(AFS_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_readdir_(AFS_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_afsfuse_open_(AFS_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_read_(AFS_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_write_(AFS_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_create_(AFS_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_mkdir_(AFS_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_rmdir_(AFS_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_unlink_(AFS_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_rename_(AFS_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_utimens_(AFS_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_mknod_(AFS_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_afsfuse_putFile_(AFS_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_afsfuse_getFile_(AFS_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status AFS::Stub::afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::Stat* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::String, ::afsfuse::Stat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_getattr_, context, request, response);
}

void AFS::Stub::async::afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::String, ::afsfuse::Stat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_getattr_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_getattr(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_getattr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>* AFS::Stub::PrepareAsyncafsfuse_getattrRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::Stat, ::afsfuse::String, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_getattr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::Stat>* AFS::Stub::Asyncafsfuse_getattrRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_getattrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::afsfuse::Dirent>* AFS::Stub::afsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request) {
  return ::grpc::internal::ClientReaderFactory< ::afsfuse::Dirent>::Create(channel_.get(), rpcmethod_afsfuse_readdir_, context, request);
}

void AFS::Stub::async::afsfuse_readdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::grpc::ClientReadReactor< ::afsfuse::Dirent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::afsfuse::Dirent>::Create(stub_->channel_.get(), stub_->rpcmethod_afsfuse_readdir_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::afsfuse::Dirent>* AFS::Stub::Asyncafsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::afsfuse::Dirent>::Create(channel_.get(), cq, rpcmethod_afsfuse_readdir_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::afsfuse::Dirent>* AFS::Stub::PrepareAsyncafsfuse_readdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::afsfuse::Dirent>::Create(channel_.get(), cq, rpcmethod_afsfuse_readdir_, context, request, false, nullptr);
}

::grpc::Status AFS::Stub::afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::afsfuse::FuseFileInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_open_, context, request, response);
}

void AFS::Stub::async::afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_open_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_open(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>* AFS::Stub::PrepareAsyncafsfuse_openRaw(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_open_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::FuseFileInfo>* AFS::Stub::Asyncafsfuse_openRaw(::grpc::ClientContext* context, const ::afsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_openRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::afsfuse::ReadResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::ReadRequest, ::afsfuse::ReadResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_read_, context, request, response);
}

void AFS::Stub::async::afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::ReadRequest, ::afsfuse::ReadResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_read_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_read(::grpc::ClientContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>* AFS::Stub::PrepareAsyncafsfuse_readRaw(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::ReadResult, ::afsfuse::ReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_read_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::ReadResult>* AFS::Stub::Asyncafsfuse_readRaw(::grpc::ClientContext* context, const ::afsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_readRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::afsfuse::WriteResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::WriteRequest, ::afsfuse::WriteResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_write_, context, request, response);
}

void AFS::Stub::async::afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::WriteRequest, ::afsfuse::WriteResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_write_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_write(::grpc::ClientContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>* AFS::Stub::PrepareAsyncafsfuse_writeRaw(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::WriteResult, ::afsfuse::WriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_write_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::WriteResult>* AFS::Stub::Asyncafsfuse_writeRaw(::grpc::ClientContext* context, const ::afsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_writeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::afsfuse::CreateResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::CreateRequest, ::afsfuse::CreateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_create_, context, request, response);
}

void AFS::Stub::async::afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::CreateRequest, ::afsfuse::CreateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_create_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_create(::grpc::ClientContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>* AFS::Stub::PrepareAsyncafsfuse_createRaw(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::CreateResult, ::afsfuse::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::CreateResult>* AFS::Stub::Asyncafsfuse_createRaw(::grpc::ClientContext* context, const ::afsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_createRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::afsfuse::OutputInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_mkdir_, context, request, response);
}

void AFS::Stub::async::afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_mkdir_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_mkdir(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::PrepareAsyncafsfuse_mkdirRaw(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::OutputInfo, ::afsfuse::MkdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::Asyncafsfuse_mkdirRaw(::grpc::ClientContext* context, const ::afsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_mkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::OutputInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::String, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_rmdir_, context, request, response);
}

void AFS::Stub::async::afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::String, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_rmdir_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_rmdir(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_rmdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::PrepareAsyncafsfuse_rmdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::OutputInfo, ::afsfuse::String, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_rmdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::Asyncafsfuse_rmdirRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_rmdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String& request, ::afsfuse::OutputInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::String, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_unlink_, context, request, response);
}

void AFS::Stub::async::afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::String, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_unlink_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_unlink(::grpc::ClientContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_unlink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::PrepareAsyncafsfuse_unlinkRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::OutputInfo, ::afsfuse::String, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_unlink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::Asyncafsfuse_unlinkRaw(::grpc::ClientContext* context, const ::afsfuse::String& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_unlinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::afsfuse::OutputInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::RenameRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_rename_, context, request, response);
}

void AFS::Stub::async::afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::RenameRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_rename_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_rename(::grpc::ClientContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::PrepareAsyncafsfuse_renameRaw(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::OutputInfo, ::afsfuse::RenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::Asyncafsfuse_renameRaw(::grpc::ClientContext* context, const ::afsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_renameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::afsfuse::OutputInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_utimens_, context, request, response);
}

void AFS::Stub::async::afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_utimens_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_utimens(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_utimens_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::PrepareAsyncafsfuse_utimensRaw(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::OutputInfo, ::afsfuse::UtimensRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_utimens_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::Asyncafsfuse_utimensRaw(::grpc::ClientContext* context, const ::afsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_utimensRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AFS::Stub::afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::afsfuse::OutputInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afsfuse::MknodRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_afsfuse_mknod_, context, request, response);
}

void AFS::Stub::async::afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afsfuse::MknodRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_mknod_, context, request, response, std::move(f));
}

void AFS::Stub::async::afsfuse_mknod(::grpc::ClientContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_afsfuse_mknod_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::PrepareAsyncafsfuse_mknodRaw(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afsfuse::OutputInfo, ::afsfuse::MknodRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_afsfuse_mknod_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afsfuse::OutputInfo>* AFS::Stub::Asyncafsfuse_mknodRaw(::grpc::ClientContext* context, const ::afsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncafsfuse_mknodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::afsfuse::FileContent>* AFS::Stub::afsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response) {
  return ::grpc::internal::ClientWriterFactory< ::afsfuse::FileContent>::Create(channel_.get(), rpcmethod_afsfuse_putFile_, context, response);
}

void AFS::Stub::async::afsfuse_putFile(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::ClientWriteReactor< ::afsfuse::FileContent>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::afsfuse::FileContent>::Create(stub_->channel_.get(), stub_->rpcmethod_afsfuse_putFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::afsfuse::FileContent>* AFS::Stub::Asyncafsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::afsfuse::FileContent>::Create(channel_.get(), cq, rpcmethod_afsfuse_putFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::afsfuse::FileContent>* AFS::Stub::PrepareAsyncafsfuse_putFileRaw(::grpc::ClientContext* context, ::afsfuse::OutputInfo* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::afsfuse::FileContent>::Create(channel_.get(), cq, rpcmethod_afsfuse_putFile_, context, response, false, nullptr);
}

::grpc::ClientReader< ::afsfuse::FileContent>* AFS::Stub::afsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request) {
  return ::grpc::internal::ClientReaderFactory< ::afsfuse::FileContent>::Create(channel_.get(), rpcmethod_afsfuse_getFile_, context, request);
}

void AFS::Stub::async::afsfuse_getFile(::grpc::ClientContext* context, const ::afsfuse::File* request, ::grpc::ClientReadReactor< ::afsfuse::FileContent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::afsfuse::FileContent>::Create(stub_->channel_.get(), stub_->rpcmethod_afsfuse_getFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::afsfuse::FileContent>* AFS::Stub::Asyncafsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::afsfuse::FileContent>::Create(channel_.get(), cq, rpcmethod_afsfuse_getFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::afsfuse::FileContent>* AFS::Stub::PrepareAsyncafsfuse_getFileRaw(::grpc::ClientContext* context, const ::afsfuse::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::afsfuse::FileContent>::Create(channel_.get(), cq, rpcmethod_afsfuse_getFile_, context, request, false, nullptr);
}

AFS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::String, ::afsfuse::Stat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::String* req,
             ::afsfuse::Stat* resp) {
               return service->afsfuse_getattr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AFS::Service, ::afsfuse::String, ::afsfuse::Dirent>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::String* req,
             ::grpc::ServerWriter<::afsfuse::Dirent>* writer) {
               return service->afsfuse_readdir(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::FuseFileInfo, ::afsfuse::FuseFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::FuseFileInfo* req,
             ::afsfuse::FuseFileInfo* resp) {
               return service->afsfuse_open(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::ReadRequest, ::afsfuse::ReadResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::ReadRequest* req,
             ::afsfuse::ReadResult* resp) {
               return service->afsfuse_read(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::WriteRequest, ::afsfuse::WriteResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::WriteRequest* req,
             ::afsfuse::WriteResult* resp) {
               return service->afsfuse_write(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::CreateRequest, ::afsfuse::CreateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::CreateRequest* req,
             ::afsfuse::CreateResult* resp) {
               return service->afsfuse_create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::MkdirRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::MkdirRequest* req,
             ::afsfuse::OutputInfo* resp) {
               return service->afsfuse_mkdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::String, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::String* req,
             ::afsfuse::OutputInfo* resp) {
               return service->afsfuse_rmdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::String, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::String* req,
             ::afsfuse::OutputInfo* resp) {
               return service->afsfuse_unlink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::RenameRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::RenameRequest* req,
             ::afsfuse::OutputInfo* resp) {
               return service->afsfuse_rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::UtimensRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::UtimensRequest* req,
             ::afsfuse::OutputInfo* resp) {
               return service->afsfuse_utimens(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AFS::Service, ::afsfuse::MknodRequest, ::afsfuse::OutputInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::MknodRequest* req,
             ::afsfuse::OutputInfo* resp) {
               return service->afsfuse_mknod(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[12],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< AFS::Service, ::afsfuse::FileContent, ::afsfuse::OutputInfo>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::afsfuse::FileContent>* reader,
             ::afsfuse::OutputInfo* resp) {
               return service->afsfuse_putFile(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AFS_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AFS::Service, ::afsfuse::File, ::afsfuse::FileContent>(
          [](AFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afsfuse::File* req,
             ::grpc::ServerWriter<::afsfuse::FileContent>* writer) {
               return service->afsfuse_getFile(ctx, req, writer);
             }, this)));
}

AFS::Service::~Service() {
}

::grpc::Status AFS::Service::afsfuse_getattr(::grpc::ServerContext* context, const ::afsfuse::String* request, ::afsfuse::Stat* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_readdir(::grpc::ServerContext* context, const ::afsfuse::String* request, ::grpc::ServerWriter< ::afsfuse::Dirent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_open(::grpc::ServerContext* context, const ::afsfuse::FuseFileInfo* request, ::afsfuse::FuseFileInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_read(::grpc::ServerContext* context, const ::afsfuse::ReadRequest* request, ::afsfuse::ReadResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_write(::grpc::ServerContext* context, const ::afsfuse::WriteRequest* request, ::afsfuse::WriteResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_create(::grpc::ServerContext* context, const ::afsfuse::CreateRequest* request, ::afsfuse::CreateResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_mkdir(::grpc::ServerContext* context, const ::afsfuse::MkdirRequest* request, ::afsfuse::OutputInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_rmdir(::grpc::ServerContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_unlink(::grpc::ServerContext* context, const ::afsfuse::String* request, ::afsfuse::OutputInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_rename(::grpc::ServerContext* context, const ::afsfuse::RenameRequest* request, ::afsfuse::OutputInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_utimens(::grpc::ServerContext* context, const ::afsfuse::UtimensRequest* request, ::afsfuse::OutputInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_mknod(::grpc::ServerContext* context, const ::afsfuse::MknodRequest* request, ::afsfuse::OutputInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_putFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::afsfuse::FileContent>* reader, ::afsfuse::OutputInfo* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AFS::Service::afsfuse_getFile(::grpc::ServerContext* context, const ::afsfuse::File* request, ::grpc::ServerWriter< ::afsfuse::FileContent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace afsfuse

