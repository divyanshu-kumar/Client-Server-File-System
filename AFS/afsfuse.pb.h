// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afsfuse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_afsfuse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_afsfuse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_afsfuse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_afsfuse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_afsfuse_2eproto;
namespace afsfuse {
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResult;
struct CreateResultDefaultTypeInternal;
extern CreateResultDefaultTypeInternal _CreateResult_default_instance_;
class Dirent;
struct DirentDefaultTypeInternal;
extern DirentDefaultTypeInternal _Dirent_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileContent;
struct FileContentDefaultTypeInternal;
extern FileContentDefaultTypeInternal _FileContent_default_instance_;
class FuseFileInfo;
struct FuseFileInfoDefaultTypeInternal;
extern FuseFileInfoDefaultTypeInternal _FuseFileInfo_default_instance_;
class MkdirRequest;
struct MkdirRequestDefaultTypeInternal;
extern MkdirRequestDefaultTypeInternal _MkdirRequest_default_instance_;
class MknodRequest;
struct MknodRequestDefaultTypeInternal;
extern MknodRequestDefaultTypeInternal _MknodRequest_default_instance_;
class OutputInfo;
struct OutputInfoDefaultTypeInternal;
extern OutputInfoDefaultTypeInternal _OutputInfo_default_instance_;
class ReadRequest;
struct ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class ReadResult;
struct ReadResultDefaultTypeInternal;
extern ReadResultDefaultTypeInternal _ReadResult_default_instance_;
class RenameRequest;
struct RenameRequestDefaultTypeInternal;
extern RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
class SerializeByte;
struct SerializeByteDefaultTypeInternal;
extern SerializeByteDefaultTypeInternal _SerializeByte_default_instance_;
class Stat;
struct StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
class String;
struct StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class UtimensRequest;
struct UtimensRequestDefaultTypeInternal;
extern UtimensRequestDefaultTypeInternal _UtimensRequest_default_instance_;
class WriteRequest;
struct WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
class WriteResult;
struct WriteResultDefaultTypeInternal;
extern WriteResultDefaultTypeInternal _WriteResult_default_instance_;
}  // namespace afsfuse
PROTOBUF_NAMESPACE_OPEN
template<> ::afsfuse::CreateRequest* Arena::CreateMaybeMessage<::afsfuse::CreateRequest>(Arena*);
template<> ::afsfuse::CreateResult* Arena::CreateMaybeMessage<::afsfuse::CreateResult>(Arena*);
template<> ::afsfuse::Dirent* Arena::CreateMaybeMessage<::afsfuse::Dirent>(Arena*);
template<> ::afsfuse::File* Arena::CreateMaybeMessage<::afsfuse::File>(Arena*);
template<> ::afsfuse::FileContent* Arena::CreateMaybeMessage<::afsfuse::FileContent>(Arena*);
template<> ::afsfuse::FuseFileInfo* Arena::CreateMaybeMessage<::afsfuse::FuseFileInfo>(Arena*);
template<> ::afsfuse::MkdirRequest* Arena::CreateMaybeMessage<::afsfuse::MkdirRequest>(Arena*);
template<> ::afsfuse::MknodRequest* Arena::CreateMaybeMessage<::afsfuse::MknodRequest>(Arena*);
template<> ::afsfuse::OutputInfo* Arena::CreateMaybeMessage<::afsfuse::OutputInfo>(Arena*);
template<> ::afsfuse::ReadRequest* Arena::CreateMaybeMessage<::afsfuse::ReadRequest>(Arena*);
template<> ::afsfuse::ReadResult* Arena::CreateMaybeMessage<::afsfuse::ReadResult>(Arena*);
template<> ::afsfuse::RenameRequest* Arena::CreateMaybeMessage<::afsfuse::RenameRequest>(Arena*);
template<> ::afsfuse::SerializeByte* Arena::CreateMaybeMessage<::afsfuse::SerializeByte>(Arena*);
template<> ::afsfuse::Stat* Arena::CreateMaybeMessage<::afsfuse::Stat>(Arena*);
template<> ::afsfuse::String* Arena::CreateMaybeMessage<::afsfuse::String>(Arena*);
template<> ::afsfuse::UtimensRequest* Arena::CreateMaybeMessage<::afsfuse::UtimensRequest>(Arena*);
template<> ::afsfuse::WriteRequest* Arena::CreateMaybeMessage<::afsfuse::WriteRequest>(Arena*);
template<> ::afsfuse::WriteResult* Arena::CreateMaybeMessage<::afsfuse::WriteResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace afsfuse {

// ===================================================================

class SerializeByte final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.SerializeByte) */ {
 public:
  inline SerializeByte() : SerializeByte(nullptr) {}
  ~SerializeByte() override;
  explicit constexpr SerializeByte(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializeByte(const SerializeByte& from);
  SerializeByte(SerializeByte&& from) noexcept
    : SerializeByte() {
    *this = ::std::move(from);
  }

  inline SerializeByte& operator=(const SerializeByte& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializeByte& operator=(SerializeByte&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializeByte& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializeByte* internal_default_instance() {
    return reinterpret_cast<const SerializeByte*>(
               &_SerializeByte_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializeByte& a, SerializeByte& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializeByte* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializeByte* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializeByte* New() const final {
    return new SerializeByte();
  }

  SerializeByte* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializeByte>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializeByte& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializeByte& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializeByte* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.SerializeByte";
  }
  protected:
  explicit SerializeByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
  };
  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_MUST_USE_RESULT std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.SerializeByte)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class String final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.String) */ {
 public:
  inline String() : String(nullptr) {}
  ~String() override;
  explicit constexpr String(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  String(const String& from);
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  inline String& operator=(String&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const String& default_instance() {
    return *internal_default_instance();
  }
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }
  inline void Swap(String* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(String* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline String* New() const final {
    return new String();
  }

  String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<String>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const String& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const String& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(String* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.String";
  }
  protected:
  explicit String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
  };
  // string str = 1;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.String)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class Dirent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.Dirent) */ {
 public:
  inline Dirent() : Dirent(nullptr) {}
  ~Dirent() override;
  explicit constexpr Dirent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dirent(const Dirent& from);
  Dirent(Dirent&& from) noexcept
    : Dirent() {
    *this = ::std::move(from);
  }

  inline Dirent& operator=(const Dirent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dirent& operator=(Dirent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dirent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dirent* internal_default_instance() {
    return reinterpret_cast<const Dirent*>(
               &_Dirent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dirent& a, Dirent& b) {
    a.Swap(&b);
  }
  inline void Swap(Dirent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dirent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dirent* New() const final {
    return new Dirent();
  }

  Dirent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dirent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dirent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Dirent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dirent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.Dirent";
  }
  protected:
  explicit Dirent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDnameFieldNumber = 2,
    kDinoFieldNumber = 1,
    kDtypeFieldNumber = 3,
    kErrFieldNumber = 4,
  };
  // string dname = 2;
  void clear_dname();
  const std::string& dname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dname();
  PROTOBUF_MUST_USE_RESULT std::string* release_dname();
  void set_allocated_dname(std::string* dname);
  private:
  const std::string& _internal_dname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dname(const std::string& value);
  std::string* _internal_mutable_dname();
  public:

  // uint32 dino = 1;
  void clear_dino();
  ::PROTOBUF_NAMESPACE_ID::uint32 dino() const;
  void set_dino(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dino() const;
  void _internal_set_dino(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dtype = 3;
  void clear_dtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 dtype() const;
  void set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dtype() const;
  void _internal_set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 err = 4;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.Dirent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.Stat) */ {
 public:
  inline Stat() : Stat(nullptr) {}
  ~Stat() override;
  explicit constexpr Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stat(const Stat& from);
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stat& operator=(Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(Stat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stat* New() const final {
    return new Stat();
  }

  Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.Stat";
  }
  protected:
  explicit Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kModeFieldNumber = 3,
    kNlinkFieldNumber = 4,
    kUidFieldNumber = 5,
    kGidFieldNumber = 6,
    kSizeFieldNumber = 7,
    kBlksizeFieldNumber = 8,
    kBlocksFieldNumber = 9,
    kAtimeFieldNumber = 10,
    kMtimeFieldNumber = 11,
    kCtimeFieldNumber = 12,
    kErrFieldNumber = 13,
  };
  // uint32 dev = 1;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint32 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dev() const;
  void _internal_set_dev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ino = 2;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint32 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ino() const;
  void _internal_set_ino(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 mode = 3;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 nlink = 4;
  void clear_nlink();
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink() const;
  void set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nlink() const;
  void _internal_set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uid = 5;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gid = 6;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint64 size = 7;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 blksize = 8;
  void clear_blksize();
  ::PROTOBUF_NAMESPACE_ID::int64 blksize() const;
  void set_blksize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_blksize() const;
  void _internal_set_blksize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 blocks = 9;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::int64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_blocks() const;
  void _internal_set_blocks(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 atime = 10;
  void clear_atime();
  ::PROTOBUF_NAMESPACE_ID::int32 atime() const;
  void set_atime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_atime() const;
  void _internal_set_atime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mtime = 11;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ctime = 12;
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::int32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 err = 13;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gid_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 blksize_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 atime_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class FuseFileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.FuseFileInfo) */ {
 public:
  inline FuseFileInfo() : FuseFileInfo(nullptr) {}
  ~FuseFileInfo() override;
  explicit constexpr FuseFileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuseFileInfo(const FuseFileInfo& from);
  FuseFileInfo(FuseFileInfo&& from) noexcept
    : FuseFileInfo() {
    *this = ::std::move(from);
  }

  inline FuseFileInfo& operator=(const FuseFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuseFileInfo& operator=(FuseFileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuseFileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuseFileInfo* internal_default_instance() {
    return reinterpret_cast<const FuseFileInfo*>(
               &_FuseFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FuseFileInfo& a, FuseFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FuseFileInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuseFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuseFileInfo* New() const final {
    return new FuseFileInfo();
  }

  FuseFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuseFileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FuseFileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FuseFileInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuseFileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.FuseFileInfo";
  }
  protected:
  explicit FuseFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 7,
    kFlagsFieldNumber = 1,
    kFhFieldNumber = 2,
    kOldfhFieldNumber = 3,
    kErrFieldNumber = 4,
    kLockownerFieldNumber = 5,
    kPolleventFieldNumber = 6,
  };
  // string path = 7;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fh = 2;
  void clear_fh();
  ::PROTOBUF_NAMESPACE_ID::int32 fh() const;
  void set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fh() const;
  void _internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 oldfh = 3;
  void clear_oldfh();
  ::PROTOBUF_NAMESPACE_ID::uint32 oldfh() const;
  void set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oldfh() const;
  void _internal_set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 err = 4;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 lockowner = 5;
  void clear_lockowner();
  ::PROTOBUF_NAMESPACE_ID::uint64 lockowner() const;
  void set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lockowner() const;
  void _internal_set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 pollevent = 6;
  void clear_pollevent();
  ::PROTOBUF_NAMESPACE_ID::uint32 pollevent() const;
  void set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pollevent() const;
  void _internal_set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.FuseFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 fh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oldfh_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lockowner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pollevent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class ReadResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.ReadResult) */ {
 public:
  inline ReadResult() : ReadResult(nullptr) {}
  ~ReadResult() override;
  explicit constexpr ReadResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadResult(const ReadResult& from);
  ReadResult(ReadResult&& from) noexcept
    : ReadResult() {
    *this = ::std::move(from);
  }

  inline ReadResult& operator=(const ReadResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResult& operator=(ReadResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadResult* internal_default_instance() {
    return reinterpret_cast<const ReadResult*>(
               &_ReadResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadResult& a, ReadResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResult* New() const final {
    return new ReadResult();
  }

  ReadResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.ReadResult";
  }
  protected:
  explicit ReadResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 2,
    kBytesreadFieldNumber = 1,
    kErrFieldNumber = 3,
  };
  // bytes buffer = 2;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_MUST_USE_RESULT std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // int32 bytesread = 1;
  void clear_bytesread();
  ::PROTOBUF_NAMESPACE_ID::int32 bytesread() const;
  void set_bytesread(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bytesread() const;
  void _internal_set_bytesread(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 err = 3;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.ReadResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::int32 bytesread_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.ReadRequest) */ {
 public:
  inline ReadRequest() : ReadRequest(nullptr) {}
  ~ReadRequest() override;
  explicit constexpr ReadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRequest(const ReadRequest& from);
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return new ReadRequest();
  }

  ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.ReadRequest";
  }
  protected:
  explicit ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kOffsetFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.ReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.WriteRequest) */ {
 public:
  inline WriteRequest() : WriteRequest(nullptr) {}
  ~WriteRequest() override;
  explicit constexpr WriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return new WriteRequest();
  }

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.WriteRequest";
  }
  protected:
  explicit WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kBufferFieldNumber = 4,
    kSizeFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bytes buffer = 4;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_MUST_USE_RESULT std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.WriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class WriteResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.WriteResult) */ {
 public:
  inline WriteResult() : WriteResult(nullptr) {}
  ~WriteResult() override;
  explicit constexpr WriteResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteResult(const WriteResult& from);
  WriteResult(WriteResult&& from) noexcept
    : WriteResult() {
    *this = ::std::move(from);
  }

  inline WriteResult& operator=(const WriteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResult& operator=(WriteResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteResult* internal_default_instance() {
    return reinterpret_cast<const WriteResult*>(
               &_WriteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WriteResult& a, WriteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteResult* New() const final {
    return new WriteResult();
  }

  WriteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.WriteResult";
  }
  protected:
  explicit WriteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbytesFieldNumber = 1,
    kErrFieldNumber = 2,
  };
  // int32 nbytes = 1;
  void clear_nbytes();
  ::PROTOBUF_NAMESPACE_ID::int32 nbytes() const;
  void set_nbytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nbytes() const;
  void _internal_set_nbytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 err = 2;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.WriteResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 nbytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() override;
  explicit constexpr CreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return new CreateRequest();
  }

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kModeFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class CreateResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.CreateResult) */ {
 public:
  inline CreateResult() : CreateResult(nullptr) {}
  ~CreateResult() override;
  explicit constexpr CreateResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateResult(const CreateResult& from);
  CreateResult(CreateResult&& from) noexcept
    : CreateResult() {
    *this = ::std::move(from);
  }

  inline CreateResult& operator=(const CreateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResult& operator=(CreateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResult* internal_default_instance() {
    return reinterpret_cast<const CreateResult*>(
               &_CreateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateResult& a, CreateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResult* New() const final {
    return new CreateResult();
  }

  CreateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.CreateResult";
  }
  protected:
  explicit CreateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kFhFieldNumber = 2,
    kOldfhFieldNumber = 3,
    kPolleventFieldNumber = 6,
    kLockownerFieldNumber = 5,
    kErrFieldNumber = 7,
  };
  // int32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fh = 2;
  void clear_fh();
  ::PROTOBUF_NAMESPACE_ID::int32 fh() const;
  void set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fh() const;
  void _internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 oldfh = 3;
  void clear_oldfh();
  ::PROTOBUF_NAMESPACE_ID::uint32 oldfh() const;
  void set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oldfh() const;
  void _internal_set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pollevent = 6;
  void clear_pollevent();
  ::PROTOBUF_NAMESPACE_ID::uint32 pollevent() const;
  void set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pollevent() const;
  void _internal_set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 lockowner = 5;
  void clear_lockowner();
  ::PROTOBUF_NAMESPACE_ID::uint64 lockowner() const;
  void set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lockowner() const;
  void _internal_set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 err = 7;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.CreateResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 fh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oldfh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pollevent_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lockowner_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class MkdirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.MkdirRequest) */ {
 public:
  inline MkdirRequest() : MkdirRequest(nullptr) {}
  ~MkdirRequest() override;
  explicit constexpr MkdirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MkdirRequest(const MkdirRequest& from);
  MkdirRequest(MkdirRequest&& from) noexcept
    : MkdirRequest() {
    *this = ::std::move(from);
  }

  inline MkdirRequest& operator=(const MkdirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkdirRequest& operator=(MkdirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MkdirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MkdirRequest* internal_default_instance() {
    return reinterpret_cast<const MkdirRequest*>(
               &_MkdirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MkdirRequest& a, MkdirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MkdirRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MkdirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MkdirRequest* New() const final {
    return new MkdirRequest();
  }

  MkdirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MkdirRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MkdirRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MkdirRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkdirRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.MkdirRequest";
  }
  protected:
  explicit MkdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // string s = 1;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_MUST_USE_RESULT std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.MkdirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class OutputInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.OutputInfo) */ {
 public:
  inline OutputInfo() : OutputInfo(nullptr) {}
  ~OutputInfo() override;
  explicit constexpr OutputInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputInfo(const OutputInfo& from);
  OutputInfo(OutputInfo&& from) noexcept
    : OutputInfo() {
    *this = ::std::move(from);
  }

  inline OutputInfo& operator=(const OutputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputInfo& operator=(OutputInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputInfo* internal_default_instance() {
    return reinterpret_cast<const OutputInfo*>(
               &_OutputInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OutputInfo& a, OutputInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputInfo* New() const final {
    return new OutputInfo();
  }

  OutputInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.OutputInfo";
  }
  protected:
  explicit OutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
    kErrFieldNumber = 2,
  };
  // string str = 1;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int32 err = 2;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.OutputInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class RenameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.RenameRequest) */ {
 public:
  inline RenameRequest() : RenameRequest(nullptr) {}
  ~RenameRequest() override;
  explicit constexpr RenameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenameRequest(const RenameRequest& from);
  RenameRequest(RenameRequest&& from) noexcept
    : RenameRequest() {
    *this = ::std::move(from);
  }

  inline RenameRequest& operator=(const RenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameRequest& operator=(RenameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenameRequest* internal_default_instance() {
    return reinterpret_cast<const RenameRequest*>(
               &_RenameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RenameRequest& a, RenameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameRequest* New() const final {
    return new RenameRequest();
  }

  RenameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.RenameRequest";
  }
  protected:
  explicit RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpFieldNumber = 1,
    kTpFieldNumber = 2,
    kFlagFieldNumber = 3,
  };
  // string fp = 1;
  void clear_fp();
  const std::string& fp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fp();
  PROTOBUF_MUST_USE_RESULT std::string* release_fp();
  void set_allocated_fp(std::string* fp);
  private:
  const std::string& _internal_fp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fp(const std::string& value);
  std::string* _internal_mutable_fp();
  public:

  // string tp = 2;
  void clear_tp();
  const std::string& tp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tp();
  PROTOBUF_MUST_USE_RESULT std::string* release_tp();
  void set_allocated_tp(std::string* tp);
  private:
  const std::string& _internal_tp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tp(const std::string& value);
  std::string* _internal_mutable_tp();
  public:

  // uint32 flag = 3;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.RenameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class UtimensRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.UtimensRequest) */ {
 public:
  inline UtimensRequest() : UtimensRequest(nullptr) {}
  ~UtimensRequest() override;
  explicit constexpr UtimensRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtimensRequest(const UtimensRequest& from);
  UtimensRequest(UtimensRequest&& from) noexcept
    : UtimensRequest() {
    *this = ::std::move(from);
  }

  inline UtimensRequest& operator=(const UtimensRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtimensRequest& operator=(UtimensRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtimensRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtimensRequest* internal_default_instance() {
    return reinterpret_cast<const UtimensRequest*>(
               &_UtimensRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UtimensRequest& a, UtimensRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UtimensRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtimensRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtimensRequest* New() const final {
    return new UtimensRequest();
  }

  UtimensRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtimensRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtimensRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtimensRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtimensRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.UtimensRequest";
  }
  protected:
  explicit UtimensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNsecFieldNumber = 3,
    kSecFieldNumber = 2,
    kSec2FieldNumber = 4,
    kNsec2FieldNumber = 5,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int64 nsec = 3;
  void clear_nsec();
  ::PROTOBUF_NAMESPACE_ID::int64 nsec() const;
  void set_nsec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nsec() const;
  void _internal_set_nsec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 sec = 2;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec2 = 4;
  void clear_sec2();
  ::PROTOBUF_NAMESPACE_ID::int32 sec2() const;
  void set_sec2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec2() const;
  void _internal_set_sec2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 nsec2 = 5;
  void clear_nsec2();
  ::PROTOBUF_NAMESPACE_ID::int64 nsec2() const;
  void set_nsec2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nsec2() const;
  void _internal_set_nsec2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.UtimensRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int64 nsec_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec2_;
  ::PROTOBUF_NAMESPACE_ID::int64 nsec2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class MknodRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.MknodRequest) */ {
 public:
  inline MknodRequest() : MknodRequest(nullptr) {}
  ~MknodRequest() override;
  explicit constexpr MknodRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MknodRequest(const MknodRequest& from);
  MknodRequest(MknodRequest&& from) noexcept
    : MknodRequest() {
    *this = ::std::move(from);
  }

  inline MknodRequest& operator=(const MknodRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MknodRequest& operator=(MknodRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MknodRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MknodRequest* internal_default_instance() {
    return reinterpret_cast<const MknodRequest*>(
               &_MknodRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MknodRequest& a, MknodRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MknodRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MknodRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MknodRequest* New() const final {
    return new MknodRequest();
  }

  MknodRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MknodRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MknodRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MknodRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MknodRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.MknodRequest";
  }
  protected:
  explicit MknodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kModeFieldNumber = 2,
    kRdevFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 rdev = 3;
  void clear_rdev();
  ::PROTOBUF_NAMESPACE_ID::uint32 rdev() const;
  void set_rdev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rdev() const;
  void _internal_set_rdev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.MknodRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rdev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class FileContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.FileContent) */ {
 public:
  inline FileContent() : FileContent(nullptr) {}
  ~FileContent() override;
  explicit constexpr FileContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileContent(const FileContent& from);
  FileContent(FileContent&& from) noexcept
    : FileContent() {
    *this = ::std::move(from);
  }

  inline FileContent& operator=(const FileContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileContent& operator=(FileContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileContent* internal_default_instance() {
    return reinterpret_cast<const FileContent*>(
               &_FileContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FileContent& a, FileContent& b) {
    a.Swap(&b);
  }
  inline void Swap(FileContent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileContent* New() const final {
    return new FileContent();
  }

  FileContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileContent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.FileContent";
  }
  protected:
  explicit FileContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kContentFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.FileContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afsfuse.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit constexpr File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return new File();
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afsfuse.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:afsfuse.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afsfuse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializeByte

// bytes buffer = 1;
inline void SerializeByte::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& SerializeByte::buffer() const {
  // @@protoc_insertion_point(field_get:afsfuse.SerializeByte.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializeByte::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.SerializeByte.buffer)
}
inline std::string* SerializeByte::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:afsfuse.SerializeByte.buffer)
  return _s;
}
inline const std::string& SerializeByte::_internal_buffer() const {
  return buffer_.Get();
}
inline void SerializeByte::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerializeByte::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerializeByte::release_buffer() {
  // @@protoc_insertion_point(field_release:afsfuse.SerializeByte.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerializeByte::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.SerializeByte.buffer)
}

// -------------------------------------------------------------------

// String

// string str = 1;
inline void String::clear_str() {
  str_.ClearToEmpty();
}
inline const std::string& String::str() const {
  // @@protoc_insertion_point(field_get:afsfuse.String.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void String::set_str(ArgT0&& arg0, ArgT... args) {
 
 str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.String.str)
}
inline std::string* String::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:afsfuse.String.str)
  return _s;
}
inline const std::string& String::_internal_str() const {
  return str_.Get();
}
inline void String::_internal_set_str(const std::string& value) {
  
  str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* String::_internal_mutable_str() {
  
  return str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* String::release_str() {
  // @@protoc_insertion_point(field_release:afsfuse.String.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void String::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.String.str)
}

// -------------------------------------------------------------------

// Dirent

// uint32 dino = 1;
inline void Dirent::clear_dino() {
  dino_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dirent::_internal_dino() const {
  return dino_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dirent::dino() const {
  // @@protoc_insertion_point(field_get:afsfuse.Dirent.dino)
  return _internal_dino();
}
inline void Dirent::_internal_set_dino(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dino_ = value;
}
inline void Dirent::set_dino(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dino(value);
  // @@protoc_insertion_point(field_set:afsfuse.Dirent.dino)
}

// string dname = 2;
inline void Dirent::clear_dname() {
  dname_.ClearToEmpty();
}
inline const std::string& Dirent::dname() const {
  // @@protoc_insertion_point(field_get:afsfuse.Dirent.dname)
  return _internal_dname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dirent::set_dname(ArgT0&& arg0, ArgT... args) {
 
 dname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.Dirent.dname)
}
inline std::string* Dirent::mutable_dname() {
  std::string* _s = _internal_mutable_dname();
  // @@protoc_insertion_point(field_mutable:afsfuse.Dirent.dname)
  return _s;
}
inline const std::string& Dirent::_internal_dname() const {
  return dname_.Get();
}
inline void Dirent::_internal_set_dname(const std::string& value) {
  
  dname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Dirent::_internal_mutable_dname() {
  
  return dname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Dirent::release_dname() {
  // @@protoc_insertion_point(field_release:afsfuse.Dirent.dname)
  return dname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Dirent::set_allocated_dname(std::string* dname) {
  if (dname != nullptr) {
    
  } else {
    
  }
  dname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.Dirent.dname)
}

// uint32 dtype = 3;
inline void Dirent::clear_dtype() {
  dtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dirent::_internal_dtype() const {
  return dtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dirent::dtype() const {
  // @@protoc_insertion_point(field_get:afsfuse.Dirent.dtype)
  return _internal_dtype();
}
inline void Dirent::_internal_set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dtype_ = value;
}
inline void Dirent::set_dtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:afsfuse.Dirent.dtype)
}

// int32 err = 4;
inline void Dirent::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dirent::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dirent::err() const {
  // @@protoc_insertion_point(field_get:afsfuse.Dirent.err)
  return _internal_err();
}
inline void Dirent::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void Dirent::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:afsfuse.Dirent.err)
}

// -------------------------------------------------------------------

// Stat

// uint32 dev = 1;
inline void Stat::clear_dev() {
  dev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::_internal_dev() const {
  return dev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::dev() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.dev)
  return _internal_dev();
}
inline void Stat::_internal_set_dev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dev_ = value;
}
inline void Stat::set_dev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.dev)
}

// uint32 ino = 2;
inline void Stat::clear_ino() {
  ino_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::_internal_ino() const {
  return ino_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::ino() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.ino)
  return _internal_ino();
}
inline void Stat::_internal_set_ino(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ino_ = value;
}
inline void Stat::set_ino(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.ino)
}

// int32 mode = 3;
inline void Stat::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::mode() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.mode)
  return _internal_mode();
}
inline void Stat::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void Stat::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.mode)
}

// uint32 nlink = 4;
inline void Stat::clear_nlink() {
  nlink_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::_internal_nlink() const {
  return nlink_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::nlink() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.nlink)
  return _internal_nlink();
}
inline void Stat::_internal_set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nlink_ = value;
}
inline void Stat::set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.nlink)
}

// uint32 uid = 5;
inline void Stat::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::uid() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.uid)
  return _internal_uid();
}
inline void Stat::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void Stat::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.uid)
}

// uint32 gid = 6;
inline void Stat::clear_gid() {
  gid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stat::gid() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.gid)
  return _internal_gid();
}
inline void Stat::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gid_ = value;
}
inline void Stat::set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.gid)
}

// sint64 size = 7;
inline void Stat::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stat::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stat::size() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.size)
  return _internal_size();
}
inline void Stat::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Stat::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.size)
}

// sint64 blksize = 8;
inline void Stat::clear_blksize() {
  blksize_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stat::_internal_blksize() const {
  return blksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stat::blksize() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.blksize)
  return _internal_blksize();
}
inline void Stat::_internal_set_blksize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blksize_ = value;
}
inline void Stat::set_blksize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_blksize(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.blksize)
}

// sint64 blocks = 9;
inline void Stat::clear_blocks() {
  blocks_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stat::_internal_blocks() const {
  return blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stat::blocks() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.blocks)
  return _internal_blocks();
}
inline void Stat::_internal_set_blocks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocks_ = value;
}
inline void Stat::set_blocks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.blocks)
}

// int32 atime = 10;
inline void Stat::clear_atime() {
  atime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::_internal_atime() const {
  return atime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::atime() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.atime)
  return _internal_atime();
}
inline void Stat::_internal_set_atime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atime_ = value;
}
inline void Stat::set_atime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_atime(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.atime)
}

// int32 mtime = 11;
inline void Stat::clear_mtime() {
  mtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::mtime() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.mtime)
  return _internal_mtime();
}
inline void Stat::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtime_ = value;
}
inline void Stat::set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.mtime)
}

// int32 ctime = 12;
inline void Stat::clear_ctime() {
  ctime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::ctime() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.ctime)
  return _internal_ctime();
}
inline void Stat::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ctime_ = value;
}
inline void Stat::set_ctime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.ctime)
}

// int32 err = 13;
inline void Stat::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stat::err() const {
  // @@protoc_insertion_point(field_get:afsfuse.Stat.err)
  return _internal_err();
}
inline void Stat::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void Stat::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:afsfuse.Stat.err)
}

// -------------------------------------------------------------------

// FuseFileInfo

// int32 flags = 1;
inline void FuseFileInfo::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuseFileInfo::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuseFileInfo::flags() const {
  // @@protoc_insertion_point(field_get:afsfuse.FuseFileInfo.flags)
  return _internal_flags();
}
inline void FuseFileInfo::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void FuseFileInfo::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:afsfuse.FuseFileInfo.flags)
}

// int32 fh = 2;
inline void FuseFileInfo::clear_fh() {
  fh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuseFileInfo::_internal_fh() const {
  return fh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuseFileInfo::fh() const {
  // @@protoc_insertion_point(field_get:afsfuse.FuseFileInfo.fh)
  return _internal_fh();
}
inline void FuseFileInfo::_internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fh_ = value;
}
inline void FuseFileInfo::set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fh(value);
  // @@protoc_insertion_point(field_set:afsfuse.FuseFileInfo.fh)
}

// uint32 oldfh = 3;
inline void FuseFileInfo::clear_oldfh() {
  oldfh_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuseFileInfo::_internal_oldfh() const {
  return oldfh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuseFileInfo::oldfh() const {
  // @@protoc_insertion_point(field_get:afsfuse.FuseFileInfo.oldfh)
  return _internal_oldfh();
}
inline void FuseFileInfo::_internal_set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  oldfh_ = value;
}
inline void FuseFileInfo::set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oldfh(value);
  // @@protoc_insertion_point(field_set:afsfuse.FuseFileInfo.oldfh)
}

// uint64 lockowner = 5;
inline void FuseFileInfo::clear_lockowner() {
  lockowner_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuseFileInfo::_internal_lockowner() const {
  return lockowner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuseFileInfo::lockowner() const {
  // @@protoc_insertion_point(field_get:afsfuse.FuseFileInfo.lockowner)
  return _internal_lockowner();
}
inline void FuseFileInfo::_internal_set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lockowner_ = value;
}
inline void FuseFileInfo::set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lockowner(value);
  // @@protoc_insertion_point(field_set:afsfuse.FuseFileInfo.lockowner)
}

// uint32 pollevent = 6;
inline void FuseFileInfo::clear_pollevent() {
  pollevent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuseFileInfo::_internal_pollevent() const {
  return pollevent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuseFileInfo::pollevent() const {
  // @@protoc_insertion_point(field_get:afsfuse.FuseFileInfo.pollevent)
  return _internal_pollevent();
}
inline void FuseFileInfo::_internal_set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pollevent_ = value;
}
inline void FuseFileInfo::set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pollevent(value);
  // @@protoc_insertion_point(field_set:afsfuse.FuseFileInfo.pollevent)
}

// int32 err = 4;
inline void FuseFileInfo::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuseFileInfo::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuseFileInfo::err() const {
  // @@protoc_insertion_point(field_get:afsfuse.FuseFileInfo.err)
  return _internal_err();
}
inline void FuseFileInfo::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void FuseFileInfo::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:afsfuse.FuseFileInfo.err)
}

// string path = 7;
inline void FuseFileInfo::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& FuseFileInfo::path() const {
  // @@protoc_insertion_point(field_get:afsfuse.FuseFileInfo.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FuseFileInfo::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.FuseFileInfo.path)
}
inline std::string* FuseFileInfo::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afsfuse.FuseFileInfo.path)
  return _s;
}
inline const std::string& FuseFileInfo::_internal_path() const {
  return path_.Get();
}
inline void FuseFileInfo::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FuseFileInfo::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FuseFileInfo::release_path() {
  // @@protoc_insertion_point(field_release:afsfuse.FuseFileInfo.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FuseFileInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.FuseFileInfo.path)
}

// -------------------------------------------------------------------

// ReadResult

// int32 bytesread = 1;
inline void ReadResult::clear_bytesread() {
  bytesread_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadResult::_internal_bytesread() const {
  return bytesread_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadResult::bytesread() const {
  // @@protoc_insertion_point(field_get:afsfuse.ReadResult.bytesread)
  return _internal_bytesread();
}
inline void ReadResult::_internal_set_bytesread(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bytesread_ = value;
}
inline void ReadResult::set_bytesread(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bytesread(value);
  // @@protoc_insertion_point(field_set:afsfuse.ReadResult.bytesread)
}

// bytes buffer = 2;
inline void ReadResult::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& ReadResult::buffer() const {
  // @@protoc_insertion_point(field_get:afsfuse.ReadResult.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadResult::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.ReadResult.buffer)
}
inline std::string* ReadResult::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:afsfuse.ReadResult.buffer)
  return _s;
}
inline const std::string& ReadResult::_internal_buffer() const {
  return buffer_.Get();
}
inline void ReadResult::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadResult::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadResult::release_buffer() {
  // @@protoc_insertion_point(field_release:afsfuse.ReadResult.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadResult::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.ReadResult.buffer)
}

// int32 err = 3;
inline void ReadResult::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadResult::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadResult::err() const {
  // @@protoc_insertion_point(field_get:afsfuse.ReadResult.err)
  return _internal_err();
}
inline void ReadResult::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void ReadResult::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:afsfuse.ReadResult.err)
}

// -------------------------------------------------------------------

// ReadRequest

// string path = 1;
inline void ReadRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ReadRequest::path() const {
  // @@protoc_insertion_point(field_get:afsfuse.ReadRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.ReadRequest.path)
}
inline std::string* ReadRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afsfuse.ReadRequest.path)
  return _s;
}
inline const std::string& ReadRequest::_internal_path() const {
  return path_.Get();
}
inline void ReadRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadRequest::release_path() {
  // @@protoc_insertion_point(field_release:afsfuse.ReadRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.ReadRequest.path)
}

// uint32 size = 2;
inline void ReadRequest::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:afsfuse.ReadRequest.size)
  return _internal_size();
}
inline void ReadRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void ReadRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:afsfuse.ReadRequest.size)
}

// int64 offset = 3;
inline void ReadRequest::clear_offset() {
  offset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRequest::offset() const {
  // @@protoc_insertion_point(field_get:afsfuse.ReadRequest.offset)
  return _internal_offset();
}
inline void ReadRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void ReadRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:afsfuse.ReadRequest.offset)
}

// -------------------------------------------------------------------

// WriteRequest

// string path = 1;
inline void WriteRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& WriteRequest::path() const {
  // @@protoc_insertion_point(field_get:afsfuse.WriteRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.WriteRequest.path)
}
inline std::string* WriteRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afsfuse.WriteRequest.path)
  return _s;
}
inline const std::string& WriteRequest::_internal_path() const {
  return path_.Get();
}
inline void WriteRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteRequest::release_path() {
  // @@protoc_insertion_point(field_release:afsfuse.WriteRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.WriteRequest.path)
}

// uint32 size = 2;
inline void WriteRequest::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriteRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriteRequest::size() const {
  // @@protoc_insertion_point(field_get:afsfuse.WriteRequest.size)
  return _internal_size();
}
inline void WriteRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void WriteRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:afsfuse.WriteRequest.size)
}

// int32 offset = 3;
inline void WriteRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteRequest::offset() const {
  // @@protoc_insertion_point(field_get:afsfuse.WriteRequest.offset)
  return _internal_offset();
}
inline void WriteRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void WriteRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:afsfuse.WriteRequest.offset)
}

// bytes buffer = 4;
inline void WriteRequest::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& WriteRequest::buffer() const {
  // @@protoc_insertion_point(field_get:afsfuse.WriteRequest.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteRequest::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.WriteRequest.buffer)
}
inline std::string* WriteRequest::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:afsfuse.WriteRequest.buffer)
  return _s;
}
inline const std::string& WriteRequest::_internal_buffer() const {
  return buffer_.Get();
}
inline void WriteRequest::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteRequest::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:afsfuse.WriteRequest.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteRequest::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.WriteRequest.buffer)
}

// -------------------------------------------------------------------

// WriteResult

// int32 nbytes = 1;
inline void WriteResult::clear_nbytes() {
  nbytes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteResult::_internal_nbytes() const {
  return nbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteResult::nbytes() const {
  // @@protoc_insertion_point(field_get:afsfuse.WriteResult.nbytes)
  return _internal_nbytes();
}
inline void WriteResult::_internal_set_nbytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nbytes_ = value;
}
inline void WriteResult::set_nbytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nbytes(value);
  // @@protoc_insertion_point(field_set:afsfuse.WriteResult.nbytes)
}

// int32 err = 2;
inline void WriteResult::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteResult::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteResult::err() const {
  // @@protoc_insertion_point(field_get:afsfuse.WriteResult.err)
  return _internal_err();
}
inline void WriteResult::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void WriteResult::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:afsfuse.WriteResult.err)
}

// -------------------------------------------------------------------

// CreateRequest

// string path = 1;
inline void CreateRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& CreateRequest::path() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.CreateRequest.path)
}
inline std::string* CreateRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afsfuse.CreateRequest.path)
  return _s;
}
inline const std::string& CreateRequest::_internal_path() const {
  return path_.Get();
}
inline void CreateRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRequest::release_path() {
  // @@protoc_insertion_point(field_release:afsfuse.CreateRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.CreateRequest.path)
}

// int32 mode = 2;
inline void CreateRequest::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::mode() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateRequest.mode)
  return _internal_mode();
}
inline void CreateRequest::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void CreateRequest::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateRequest.mode)
}

// int32 flags = 3;
inline void CreateRequest::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::flags() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateRequest.flags)
  return _internal_flags();
}
inline void CreateRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void CreateRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateRequest.flags)
}

// -------------------------------------------------------------------

// CreateResult

// int32 flags = 1;
inline void CreateResult::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResult::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResult::flags() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateResult.flags)
  return _internal_flags();
}
inline void CreateResult::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void CreateResult::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateResult.flags)
}

// int32 fh = 2;
inline void CreateResult::clear_fh() {
  fh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResult::_internal_fh() const {
  return fh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResult::fh() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateResult.fh)
  return _internal_fh();
}
inline void CreateResult::_internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fh_ = value;
}
inline void CreateResult::set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fh(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateResult.fh)
}

// uint32 oldfh = 3;
inline void CreateResult::clear_oldfh() {
  oldfh_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateResult::_internal_oldfh() const {
  return oldfh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateResult::oldfh() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateResult.oldfh)
  return _internal_oldfh();
}
inline void CreateResult::_internal_set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  oldfh_ = value;
}
inline void CreateResult::set_oldfh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oldfh(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateResult.oldfh)
}

// uint64 lockowner = 5;
inline void CreateResult::clear_lockowner() {
  lockowner_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateResult::_internal_lockowner() const {
  return lockowner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateResult::lockowner() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateResult.lockowner)
  return _internal_lockowner();
}
inline void CreateResult::_internal_set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lockowner_ = value;
}
inline void CreateResult::set_lockowner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lockowner(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateResult.lockowner)
}

// uint32 pollevent = 6;
inline void CreateResult::clear_pollevent() {
  pollevent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateResult::_internal_pollevent() const {
  return pollevent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateResult::pollevent() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateResult.pollevent)
  return _internal_pollevent();
}
inline void CreateResult::_internal_set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pollevent_ = value;
}
inline void CreateResult::set_pollevent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pollevent(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateResult.pollevent)
}

// int32 err = 7;
inline void CreateResult::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResult::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResult::err() const {
  // @@protoc_insertion_point(field_get:afsfuse.CreateResult.err)
  return _internal_err();
}
inline void CreateResult::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void CreateResult::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:afsfuse.CreateResult.err)
}

// -------------------------------------------------------------------

// MkdirRequest

// string s = 1;
inline void MkdirRequest::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& MkdirRequest::s() const {
  // @@protoc_insertion_point(field_get:afsfuse.MkdirRequest.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MkdirRequest::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.MkdirRequest.s)
}
inline std::string* MkdirRequest::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:afsfuse.MkdirRequest.s)
  return _s;
}
inline const std::string& MkdirRequest::_internal_s() const {
  return s_.Get();
}
inline void MkdirRequest::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MkdirRequest::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MkdirRequest::release_s() {
  // @@protoc_insertion_point(field_release:afsfuse.MkdirRequest.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MkdirRequest::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.MkdirRequest.s)
}

// int32 mode = 2;
inline void MkdirRequest::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MkdirRequest::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MkdirRequest::mode() const {
  // @@protoc_insertion_point(field_get:afsfuse.MkdirRequest.mode)
  return _internal_mode();
}
inline void MkdirRequest::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void MkdirRequest::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afsfuse.MkdirRequest.mode)
}

// -------------------------------------------------------------------

// OutputInfo

// string str = 1;
inline void OutputInfo::clear_str() {
  str_.ClearToEmpty();
}
inline const std::string& OutputInfo::str() const {
  // @@protoc_insertion_point(field_get:afsfuse.OutputInfo.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputInfo::set_str(ArgT0&& arg0, ArgT... args) {
 
 str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.OutputInfo.str)
}
inline std::string* OutputInfo::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:afsfuse.OutputInfo.str)
  return _s;
}
inline const std::string& OutputInfo::_internal_str() const {
  return str_.Get();
}
inline void OutputInfo::_internal_set_str(const std::string& value) {
  
  str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OutputInfo::_internal_mutable_str() {
  
  return str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OutputInfo::release_str() {
  // @@protoc_insertion_point(field_release:afsfuse.OutputInfo.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OutputInfo::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.OutputInfo.str)
}

// int32 err = 2;
inline void OutputInfo::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputInfo::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputInfo::err() const {
  // @@protoc_insertion_point(field_get:afsfuse.OutputInfo.err)
  return _internal_err();
}
inline void OutputInfo::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void OutputInfo::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:afsfuse.OutputInfo.err)
}

// -------------------------------------------------------------------

// RenameRequest

// string fp = 1;
inline void RenameRequest::clear_fp() {
  fp_.ClearToEmpty();
}
inline const std::string& RenameRequest::fp() const {
  // @@protoc_insertion_point(field_get:afsfuse.RenameRequest.fp)
  return _internal_fp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameRequest::set_fp(ArgT0&& arg0, ArgT... args) {
 
 fp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.RenameRequest.fp)
}
inline std::string* RenameRequest::mutable_fp() {
  std::string* _s = _internal_mutable_fp();
  // @@protoc_insertion_point(field_mutable:afsfuse.RenameRequest.fp)
  return _s;
}
inline const std::string& RenameRequest::_internal_fp() const {
  return fp_.Get();
}
inline void RenameRequest::_internal_set_fp(const std::string& value) {
  
  fp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenameRequest::_internal_mutable_fp() {
  
  return fp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenameRequest::release_fp() {
  // @@protoc_insertion_point(field_release:afsfuse.RenameRequest.fp)
  return fp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenameRequest::set_allocated_fp(std::string* fp) {
  if (fp != nullptr) {
    
  } else {
    
  }
  fp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.RenameRequest.fp)
}

// string tp = 2;
inline void RenameRequest::clear_tp() {
  tp_.ClearToEmpty();
}
inline const std::string& RenameRequest::tp() const {
  // @@protoc_insertion_point(field_get:afsfuse.RenameRequest.tp)
  return _internal_tp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameRequest::set_tp(ArgT0&& arg0, ArgT... args) {
 
 tp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.RenameRequest.tp)
}
inline std::string* RenameRequest::mutable_tp() {
  std::string* _s = _internal_mutable_tp();
  // @@protoc_insertion_point(field_mutable:afsfuse.RenameRequest.tp)
  return _s;
}
inline const std::string& RenameRequest::_internal_tp() const {
  return tp_.Get();
}
inline void RenameRequest::_internal_set_tp(const std::string& value) {
  
  tp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenameRequest::_internal_mutable_tp() {
  
  return tp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenameRequest::release_tp() {
  // @@protoc_insertion_point(field_release:afsfuse.RenameRequest.tp)
  return tp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenameRequest::set_allocated_tp(std::string* tp) {
  if (tp != nullptr) {
    
  } else {
    
  }
  tp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.RenameRequest.tp)
}

// uint32 flag = 3;
inline void RenameRequest::clear_flag() {
  flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenameRequest::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenameRequest::flag() const {
  // @@protoc_insertion_point(field_get:afsfuse.RenameRequest.flag)
  return _internal_flag();
}
inline void RenameRequest::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flag_ = value;
}
inline void RenameRequest::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:afsfuse.RenameRequest.flag)
}

// -------------------------------------------------------------------

// UtimensRequest

// string path = 1;
inline void UtimensRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& UtimensRequest::path() const {
  // @@protoc_insertion_point(field_get:afsfuse.UtimensRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtimensRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.UtimensRequest.path)
}
inline std::string* UtimensRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afsfuse.UtimensRequest.path)
  return _s;
}
inline const std::string& UtimensRequest::_internal_path() const {
  return path_.Get();
}
inline void UtimensRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtimensRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtimensRequest::release_path() {
  // @@protoc_insertion_point(field_release:afsfuse.UtimensRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtimensRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.UtimensRequest.path)
}

// int32 sec = 2;
inline void UtimensRequest::clear_sec() {
  sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtimensRequest::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtimensRequest::sec() const {
  // @@protoc_insertion_point(field_get:afsfuse.UtimensRequest.sec)
  return _internal_sec();
}
inline void UtimensRequest::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_ = value;
}
inline void UtimensRequest::set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:afsfuse.UtimensRequest.sec)
}

// int64 nsec = 3;
inline void UtimensRequest::clear_nsec() {
  nsec_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UtimensRequest::_internal_nsec() const {
  return nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UtimensRequest::nsec() const {
  // @@protoc_insertion_point(field_get:afsfuse.UtimensRequest.nsec)
  return _internal_nsec();
}
inline void UtimensRequest::_internal_set_nsec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nsec_ = value;
}
inline void UtimensRequest::set_nsec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:afsfuse.UtimensRequest.nsec)
}

// int32 sec2 = 4;
inline void UtimensRequest::clear_sec2() {
  sec2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtimensRequest::_internal_sec2() const {
  return sec2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UtimensRequest::sec2() const {
  // @@protoc_insertion_point(field_get:afsfuse.UtimensRequest.sec2)
  return _internal_sec2();
}
inline void UtimensRequest::_internal_set_sec2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec2_ = value;
}
inline void UtimensRequest::set_sec2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec2(value);
  // @@protoc_insertion_point(field_set:afsfuse.UtimensRequest.sec2)
}

// int64 nsec2 = 5;
inline void UtimensRequest::clear_nsec2() {
  nsec2_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UtimensRequest::_internal_nsec2() const {
  return nsec2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UtimensRequest::nsec2() const {
  // @@protoc_insertion_point(field_get:afsfuse.UtimensRequest.nsec2)
  return _internal_nsec2();
}
inline void UtimensRequest::_internal_set_nsec2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nsec2_ = value;
}
inline void UtimensRequest::set_nsec2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nsec2(value);
  // @@protoc_insertion_point(field_set:afsfuse.UtimensRequest.nsec2)
}

// -------------------------------------------------------------------

// MknodRequest

// string path = 1;
inline void MknodRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& MknodRequest::path() const {
  // @@protoc_insertion_point(field_get:afsfuse.MknodRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MknodRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.MknodRequest.path)
}
inline std::string* MknodRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afsfuse.MknodRequest.path)
  return _s;
}
inline const std::string& MknodRequest::_internal_path() const {
  return path_.Get();
}
inline void MknodRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MknodRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MknodRequest::release_path() {
  // @@protoc_insertion_point(field_release:afsfuse.MknodRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MknodRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.MknodRequest.path)
}

// int32 mode = 2;
inline void MknodRequest::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MknodRequest::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MknodRequest::mode() const {
  // @@protoc_insertion_point(field_get:afsfuse.MknodRequest.mode)
  return _internal_mode();
}
inline void MknodRequest::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void MknodRequest::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afsfuse.MknodRequest.mode)
}

// uint32 rdev = 3;
inline void MknodRequest::clear_rdev() {
  rdev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MknodRequest::_internal_rdev() const {
  return rdev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MknodRequest::rdev() const {
  // @@protoc_insertion_point(field_get:afsfuse.MknodRequest.rdev)
  return _internal_rdev();
}
inline void MknodRequest::_internal_set_rdev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rdev_ = value;
}
inline void MknodRequest::set_rdev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rdev(value);
  // @@protoc_insertion_point(field_set:afsfuse.MknodRequest.rdev)
}

// -------------------------------------------------------------------

// FileContent

// int32 id = 1;
inline void FileContent::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileContent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileContent::id() const {
  // @@protoc_insertion_point(field_get:afsfuse.FileContent.id)
  return _internal_id();
}
inline void FileContent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void FileContent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:afsfuse.FileContent.id)
}

// string name = 2;
inline void FileContent::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileContent::name() const {
  // @@protoc_insertion_point(field_get:afsfuse.FileContent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContent::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.FileContent.name)
}
inline std::string* FileContent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:afsfuse.FileContent.name)
  return _s;
}
inline const std::string& FileContent::_internal_name() const {
  return name_.Get();
}
inline void FileContent::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileContent::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileContent::release_name() {
  // @@protoc_insertion_point(field_release:afsfuse.FileContent.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileContent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.FileContent.name)
}

// bytes content = 3;
inline void FileContent::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& FileContent::content() const {
  // @@protoc_insertion_point(field_get:afsfuse.FileContent.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContent::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.FileContent.content)
}
inline std::string* FileContent::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:afsfuse.FileContent.content)
  return _s;
}
inline const std::string& FileContent::_internal_content() const {
  return content_.Get();
}
inline void FileContent::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileContent::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileContent::release_content() {
  // @@protoc_insertion_point(field_release:afsfuse.FileContent.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileContent::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.FileContent.content)
}

// -------------------------------------------------------------------

// File

// string path = 1;
inline void File::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& File::path() const {
  // @@protoc_insertion_point(field_get:afsfuse.File.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afsfuse.File.path)
}
inline std::string* File::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afsfuse.File.path)
  return _s;
}
inline const std::string& File::_internal_path() const {
  return path_.Get();
}
inline void File::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* File::release_path() {
  // @@protoc_insertion_point(field_release:afsfuse.File.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void File::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:afsfuse.File.path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace afsfuse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_afsfuse_2eproto
